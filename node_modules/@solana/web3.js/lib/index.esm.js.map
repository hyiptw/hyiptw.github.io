{"version":3,"file":"index.esm.js","sources":["../src/util/to-buffer.js","../src/publickey.js","../src/account.js","../src/bpf-loader-deprecated.js","../src/layout.js","../src/util/shortvec-encoding.js","../src/message.js","../src/transaction.js","../src/sysvar.js","../src/fee-calculator.js","../src/nonce-account.js","../src/timing.js","../src/util/sleep.js","../src/util/promise-timeout.js","../src/agent-manager.js","../src/connection.js","../src/util/send-and-confirm-transaction.js","../src/instruction.js","../src/system-program.js","../src/loader.js","../src/bpf-loader.js","../src/stake-program.js","../src/validator-info.js","../src/vote-account.js","../src/util/send-and-confirm-raw-transaction.js","../src/util/cluster.js","../src/index.js"],"sourcesContent":["// @flow\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\n//$FlowFixMe\nlet naclLowLevel = nacl.lowlevel;\n\ntype PublicKeyNonce = [PublicKey, number]; // This type exists to workaround an esdoc parse error\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n      if (decoded.length != 32) {\n        throw new Error(`Invalid public key input`);\n      }\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      buffer = Buffer.concat([buffer, Buffer.from(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(null, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKeyNonce> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n}\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0,\n  0x4a0e,\n  0x1b27,\n  0xc4ee,\n  0xe478,\n  0xad2f,\n  0x1806,\n  0x2f43,\n  0xd7a7,\n  0x3dfb,\n  0x0099,\n  0x2b4d,\n  0xdf0b,\n  0x4fc1,\n  0x2480,\n  0x2b83,\n]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\nimport {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: Object, fields: Object): number {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport bs58 from 'bs58';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\n\n/**\n * The message header, identifying signed and read-only account\n *\n * @typedef {Object} MessageHeader\n * @property {number} numRequiredSignatures The number of signatures required for this message to be considered valid. The\n * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n * @property {number} numReadonlySignedAccounts: The last `numReadonlySignedAccounts` of the signed keys are read-only accounts\n * @property {number} numReadonlyUnsignedAccounts The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts\n */\nexport type MessageHeader = {\n  numRequiredSignatures: number,\n  numReadonlySignedAccounts: number,\n  numReadonlyUnsignedAccounts: number,\n};\n\n/**\n * An instruction to execute by a program\n *\n * @typedef {Object} CompiledInstruction\n * @property {number} programIdIndex Index into the transaction keys array indicating the program account that executes this instruction\n * @property {number[]} accounts Ordered indices into the transaction keys array indicating which accounts to pass to the program\n * @property {string} data The program input data encoded as base 58\n */\nexport type CompiledInstruction = {\n  programIdIndex: number,\n  accounts: number[],\n  data: string,\n};\n\n/**\n * Message constructor arguments\n *\n * @typedef {Object} MessageArgs\n * @property {MessageHeader} header The message header, identifying signed and read-only `accountKeys`\n * @property {string[]} accounts All the account keys used by this transaction\n * @property {Blockhash} recentBlockhash The hash of a recent ledger block\n * @property {CompiledInstruction[]} instructions Instructions that will be executed in sequence and committed in one atomic transaction if all succeed.\n */\ntype MessageArgs = {\n  header: MessageHeader,\n  accountKeys: string[],\n  recentBlockhash: Blockhash,\n  instructions: CompiledInstruction[],\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  findSignerIndex(signer: PublicKey): number {\n    const index = this.accountKeys.findIndex(accountKey => {\n      return accountKey.equals(signer);\n    });\n    if (index < 0) {\n      throw new Error(`unknown signer: ${signer.toString()}`);\n    }\n    return index;\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => key.toBuffer()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIdIndex = byteArray.shift();\n      const accountCount = shortvec.decodeLength(byteArray);\n      instruction.accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = byteArray.slice(0, dataLength);\n      instruction.data = bs58.encode(Buffer.from(data));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport type {CompiledInstruction} from './message';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n *\n * @typedef {Object} AccountMeta\n * @property {PublicKey} pubkey An account's public key\n * @property {boolean} isSigner True if an instruction requires a transaction signature matching `pubkey`\n * @property {boolean} isWritable True if the `pubkey` can be loaded as a read-write account.\n */\nexport type AccountMeta = {\n  pubkey: PublicKey,\n  isSigner: boolean,\n  isWritable: boolean,\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {|\n  keys?: Array<AccountMeta>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Configuration object for Transaction.serialize()\n *\n * @typedef {Object} SerializeConfig\n * @property {boolean|undefined} requireAllSignatures Require all transaction signatures be present (default: true)\n * @property {boolean|undefined} verifySignatures Verify provided signatures (default: true)\n */\nexport type SerializeConfig = {\n  requireAllSignatures?: boolean,\n  verifySignatures?: boolean,\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property {?Blockhash} recentBlockhash A recent blockhash\n * @property {?Array<SignaturePubkeyPair>} signatures One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  nonceInfo?: NonceInformation | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * NonceInformation to be used to build a Transaction.\n *\n * @typedef {Object} NonceInformation\n * @property {Blockhash} nonce The current Nonce blockhash\n * @property {TransactionInstruction} nonceInstruction AdvanceNonceAccount Instruction\n */\ntype NonceInformation = {|\n  nonce: Blockhash,\n  nonceInstruction: TransactionInstruction,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer (first signer)\n   */\n  get feePayer(): PublicKey | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].publicKey;\n    }\n    return null;\n  }\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id.  Must be populated by the caller\n   */\n  recentBlockhash: Blockhash | null;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo: NonceInformation | null;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    if (this.feePayer === null) {\n      throw new Error('Transaction feePayer required');\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move payer to the front and disallow unknown signers\n    this.signatures.forEach((signature, signatureIndex) => {\n      const isPayer = signatureIndex === 0;\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (isPayer) {\n          const [payerMeta] = uniqueMetas.splice(uniqueIndex, 1);\n          payerMeta.isSigner = true;\n          payerMeta.isWritable = true;\n          uniqueMetas.unshift(payerMeta);\n        } else {\n          uniqueMetas[uniqueIndex].isSigner = true;\n        }\n      } else if (isPayer) {\n        uniqueMetas.unshift({\n          pubkey: signature.publicKey,\n          isSigner: true,\n          isWritable: true,\n        });\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    });\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    if (numRequiredSignatures !== this.signatures.length) {\n      throw new Error('missing signer(s)');\n    }\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(keyObj =>\n            accountKeys.indexOf(keyObj.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this.compileMessage().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used when testing for Transaction confirmation. The first signer\n   * will be used as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(signer => {\n        const key = signer.publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(signer => ({\n        signature: null,\n        publicKey: signer.publicKey,\n      }));\n\n    this.partialSign(...signers);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to a public key that was previously provided to `setSigners`.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const message = this.compileMessage();\n    this.signatures.sort(function (x, y) {\n      const xIndex = message.findSignerIndex(x.publicKey);\n      const yIndex = message.findSignerIndex(y.publicKey);\n      return xIndex < yIndex ? -1 : 1;\n    });\n\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this.addSignature(signer.publicKey, signature);\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to a public key that was previously provided to `setSigners`.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @private\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @private\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","// @flow\nimport {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @private\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n */\nexport type FeeCalculator = {\n  lamportsPerSignature: number,\n};\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @private\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    nonceAccount.authorizedPubkey = new PublicKey(\n      nonceAccount.authorizedPubkey,\n    );\n    nonceAccount.nonce = new PublicKey(nonceAccount.nonce).toString();\n    return nonceAccount;\n  }\n}\n","// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @ignore\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @ignore\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nexport function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: TimeoutID;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","// @flow\n\nimport {Agent} from 'http';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: Agent = AgentManager._newAgent();\n  _activeRequests = 0;\n  _destroyTimeout: TimeoutID | null = null;\n\n  static _newAgent(): Agent {\n    return new Agent({keepAlive: true, maxSockets: 25});\n  }\n\n  requestStart(): Agent {\n    // $FlowExpectedError - Don't manage agents in the browser\n    if (process.browser) return;\n\n    this._activeRequests++;\n    clearTimeout(this._destroyTimeout);\n    this._destroyTimeout = null;\n    return this._agent;\n  }\n\n  requestEnd() {\n    // $FlowExpectedError - Don't manage agents in the browser\n    if (process.browser) return;\n\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent();\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n","// @flow\n\nimport assert from 'assert';\nimport bs58 from 'bs58';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\nimport {AgentManager} from './agent-manager';\n\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype TokenAccountsFilter =\n  | {|\n      mint: PublicKey,\n    |}\n  | {|\n      programId: PublicKey,\n    |};\n\n/**\n * Extra contextual information for RPC responses\n *\n * @typedef {Object} Context\n * @property {number} slot\n */\ntype Context = {\n  slot: number,\n};\n\n/**\n * Options for sending transactions\n *\n * @typedef {Object} SendOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type SendOptions = {\n  skipPreflight?: boolean,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for confirming transactions\n *\n * @typedef {Object} ConfirmOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} commitment desired commitment level\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type ConfirmOptions = {\n  skipPreflight?: boolean,\n  commitment?: Commitment,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n *\n * @typedef {Object} ConfirmedSignaturesForAddress2Options\n * @property {TransactionSignature | undefined} before start searching backwards from this transaction signature.\n *               If not provided the search starts from the highest max confirmed block.\n * @property {number | undefined} limit maximum transaction signatures to return (between 1 and 1,000, default: 1,000).\n *\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  before?: TransactionSignature,\n  limit?: number,\n};\n\n/**\n * RPC Response with extra contextual information\n *\n * @typedef {Object} RpcResponseAndContext\n * @property {Context} context\n * @property {T} value response\n */\ntype RpcResponseAndContext<T> = {\n  context: Context,\n  value: T,\n};\n\n/**\n * @private\n */\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nfunction notificationResultAndContext(resultDescription: any) {\n  return struct({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'max':    Query the most recent block which has been finalized by the cluster\n *   'recent': Query the most recent block which has reached 1 confirmation by the connected node\n *   'root':   Query the most recent block which has been rooted by the connected node\n *   'single': Query the most recent block which has reached 1 confirmation by the cluster\n *   'singleGossip': Query the most recent block which has reached 1 confirmation according to votes seen in gossip\n * </pre>\n *\n * @typedef {'max' | 'recent' | 'root' | 'single' | 'singleGossip'} Commitment\n */\nexport type Commitment = 'max' | 'recent' | 'root' | 'single' | 'singleGossip';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n *\n * @typedef {'circulating' | 'nonCirculating'} LargestAccountsFilter\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n *\n * @typedef {Object} GetLargestAccountsConfig\n * @property {Commitment|undefined} commitment The level of commitment desired\n * @property {LargestAccountsFilter|undefined} filter Filter largest accounts by whether they are part of the circulating supply\n */\ntype GetLargestAccountsConfig = {\n  commitment: ?Commitment,\n  filter: ?LargestAccountsFilter,\n};\n\n/**\n * Configuration object for changing query behavior\n *\n * @typedef {Object} SignatureStatusConfig\n * @property {boolean} searchTransactionHistory enable searching status history, not needed for recent transactions\n */\nexport type SignatureStatusConfig = {\n  searchTransactionHistory: boolean,\n};\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string|null} gossip Gossip network address for the node\n * @property {string|null} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n * @property {string|null} version Software version of the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string | null,\n  tpu: string | null,\n  rpc: string | null,\n  version: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  activatedStake: number,\n  epochVoteAccount: boolean,\n  epochCredits: Array<[number, number, number]>,\n  commission: number,\n  lastVote: number,\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\ntype VoteAccountStatus = {\n  current: Array<VoteAccountInfo>,\n  delinquent: Array<VoteAccountInfo>,\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n *\n * @typedef {Object} InflationGovernor\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} taper\n * @property {number} terminal\n */\ntype InflationGovernor = {\n  foundation: number,\n  foundationTerm: number,\n  initial: number,\n  taper: number,\n  terminal: number,\n};\n\nconst GetInflationGovernorResult = struct({\n  foundation: 'number',\n  foundationTerm: 'number',\n  initial: 'number',\n  taper: 'number',\n  terminal: 'number',\n});\n\n/**\n * Information about the current epoch\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n * @property {number} blockHeight\n */\ntype EpochInfo = {\n  epoch: number,\n  slotIndex: number,\n  slotsInEpoch: number,\n  absoluteSlot: number,\n  blockHeight: number | null,\n};\n\nconst GetEpochInfoResult = struct({\n  epoch: 'number',\n  slotIndex: 'number',\n  slotsInEpoch: 'number',\n  absoluteSlot: 'number',\n  blockHeight: 'number?',\n});\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slotsPerEpoch The maximum number of slots in each epoch\n * @property {number} leaderScheduleSlotOffset The number of slots before beginning of an epoch to calculate a leader schedule for that epoch\n * @property {boolean} warmup Indicates whether epochs start short and grow\n * @property {number} firstNormalEpoch The first epoch with `slotsPerEpoch` slots\n * @property {number} firstNormalSlot The first slot of `firstNormalEpoch`\n */\ntype EpochSchedule = {\n  slotsPerEpoch: number,\n  leaderScheduleSlotOffset: number,\n  warmup: boolean,\n  firstNormalEpoch: number,\n  firstNormalSlot: number,\n};\n\nconst GetEpochScheduleResult = struct({\n  slotsPerEpoch: 'number',\n  leaderScheduleSlotOffset: 'number',\n  warmup: 'boolean',\n  firstNormalEpoch: 'number',\n  firstNormalSlot: 'number',\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n *\n * @typedef {Object} LeaderSchedule\n */\ntype LeaderSchedule = {\n  [address: string]: number[],\n};\n\nconst GetLeaderScheduleResult = struct.record([\n  'string',\n  'any', // validating struct.array(['number']) is extremely slow\n]);\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = struct.union(['null', 'object']);\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = struct({err: TransactionErrorResult});\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst Version = struct.pick({\n  'solana-core': 'string',\n  'feature-set': 'number?',\n});\n\ntype SimulatedTransactionResponse = {\n  err: TransactionError | string | null,\n  logs: Array<string> | null,\n};\n\nconst SimulatedTransactionResponseValidator = jsonRpcResultAndContext(\n  struct.pick({\n    err: struct.union(['null', 'object', 'string']),\n    logs: struct.union(['null', struct.array(['string'])]),\n  }),\n);\n\n/**\n * Metadata for a confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ConfirmedTransactionMeta = {\n  fee: number,\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {Transaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n */\ntype ConfirmedTransaction = {\n  slot: number,\n  transaction: Transaction,\n  meta: ConfirmedTransactionMeta | null,\n};\n\n/**\n * A partially decoded transaction instruction\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {PublicKey} accounts Indicates if the account signed the transaction\n * @property {string} data Raw base-58 instruction data\n */\ntype PartiallyDecodedInstruction = {|\n  programId: PublicKey,\n  accounts: Array<PublicKey>,\n  data: string,\n|};\n\n/**\n * A parsed transaction message account\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {boolean} signer Indicates if the account signed the transaction\n * @property {boolean} writable Indicates if the account is writable for this transaction\n */\ntype ParsedMessageAccount = {\n  pubkey: PublicKey,\n  signer: boolean,\n  writable: boolean,\n};\n\n/**\n * A parsed transaction instruction\n *\n * @typedef {Object} ParsedInstruction\n * @property {string} program Name of the program for this instruction\n * @property {PublicKey} programId ID of the program for this instruction\n * @property {any} parsed Parsed instruction info\n */\ntype ParsedInstruction = {|\n  program: string,\n  programId: PublicKey,\n  parsed: any,\n|};\n\n/**\n * A parsed transaction message\n *\n * @typedef {Object} ParsedMessage\n * @property {Array<ParsedMessageAccount>} accountKeys Accounts used in the instructions\n * @property {Array<ParsedInstruction | PartiallyDecodedInstruction>} instructions The atomically executed instructions for the transaction\n * @property {string} recentBlockhash Recent blockhash\n */\ntype ParsedMessage = {\n  accountKeys: ParsedMessageAccount[],\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n  recentBlockhash: string,\n};\n\n/**\n * A parsed transaction\n *\n * @typedef {Object} ParsedTransaction\n * @property {Array<string>} signatures Signatures for the transaction\n * @property {ParsedMessage} message Message of the transaction\n */\ntype ParsedTransaction = {\n  signatures: Array<string>,\n  message: ParsedMessage,\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {ParsedTransaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n */\ntype ParsedConfirmedTransaction = {\n  slot: number,\n  transaction: ParsedTransaction,\n  meta: ConfirmedTransactionMeta | null,\n};\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<object>} transactions Vector of transactions and status metas\n * @property {Array<object>} rewards Vector of block rewards\n */\ntype ConfirmedBlock = {\n  blockhash: Blockhash,\n  previousBlockhash: Blockhash,\n  parentSlot: number,\n  transactions: Array<{\n    transaction: Transaction,\n    meta: ConfirmedTransactionMeta | null,\n  }>,\n  rewards: Array<{\n    pubkey: string,\n    lamports: number,\n  }>,\n};\n\nfunction createRpcRequest(url): RpcRequest {\n  const agentManager = new AgentManager();\n  const server = jayson(async (request, callback) => {\n    const agent = agentManager.requestStart();\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res = {};\n      let waitTime = 500;\n      for (;;) {\n        res = await fetch(url, options);\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager.requestEnd();\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetInflationGovernorResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochScheduleResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceAndContextRpcResult = jsonRpcResultAndContext('number?');\n\n/**\n * Expected JSON RPC response for the \"getBlockTime\" message\n */\nconst GetBlockTimeRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: struct.union(['null', 'number', 'undefined']),\n});\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number',\n});\n\n/**\n * Supply\n *\n * @typedef {Object} Supply\n * @property {number} total Total supply in lamports\n * @property {number} circulating Circulating supply in lamports\n * @property {number} nonCirculating Non-circulating supply in lamports\n * @property {Array<PublicKey>} nonCirculatingAccounts List of non-circulating account addresses\n */\ntype Supply = {\n  total: number,\n  circulating: number,\n  nonCirculating: number,\n  nonCirculatingAccounts: Array<PublicKey>,\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  struct({\n    total: 'number',\n    circulating: 'number',\n    nonCirculating: 'number',\n    nonCirculatingAccounts: struct.array(['string']),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n *\n * @typedef {Object} TokenAmount\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAmount = {\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = struct.object({\n  amount: 'string',\n  uiAmount: 'number',\n  decimals: 'number',\n});\n\n/**\n * Token address and balance.\n *\n * @typedef {Object} TokenAccountBalancePair\n * @property {PublicKey} address Address of the token account\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAccountBalancePair = {\n  address: PublicKey,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.pick({\n      address: 'string',\n      amount: 'string',\n      uiAmount: 'number',\n      decimals: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountBalance\" message\n */\nconst GetTokenAccountBalance = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenSupply\" message\n */\nconst GetTokenSupplyRpcResult = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: ['string', struct.literal('base64')],\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: struct.pick({\n          program: 'string',\n          parsed: 'any',\n          space: 'number',\n        }),\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Pair of an account address and its balance\n *\n * @typedef {Object} AccountBalancePair\n * @property {PublicKey} address\n * @property {number} lamports\n */\ntype AccountBalancePair = {\n  address: PublicKey,\n  lamports: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct({\n      lamports: 'number',\n      address: 'string',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVersion\" message\n */\nconst GetVersionRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: Version,\n});\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst ParsedAccountInfoResult = struct.object({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: struct.union([\n    ['string', struct.literal('base64')],\n    struct.pick({\n      program: 'string',\n      parsed: 'any',\n      space: 'number',\n    }),\n  ]),\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst StakeActivationResult = struct.object({\n  state: struct.union([\n    struct.literal('active'),\n    struct.literal('inactive'),\n    struct.literal('activating'),\n    struct.literal('deactivating'),\n  ]),\n  active: 'number',\n  inactive: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoAndContextRpcResult = jsonRpcResultAndContext(\n  struct.union(['null', AccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message with jsonParsed param\n */\nconst GetParsedAccountInfoResult = jsonRpcResultAndContext(\n  struct.union(['null', ParsedAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getStakeActivation\" message with jsonParsed param\n */\nconst GetStakeActivationResult = jsonRpcResult(StakeActivationResult);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message\n */\nconst GetConfirmedSignaturesForAddressRpcResult = jsonRpcResult(\n  struct.array(['string']),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  struct.array([\n    struct({\n      signature: 'string',\n      slot: 'number',\n      err: TransactionErrorResult,\n      memo: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: AccountInfoResult,\n});\n\n/**\n * @private\n */\nconst ParsedProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: ParsedAccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @private\n */\nconst SlotInfoResult = struct({\n  parent: 'number',\n  slot: 'number',\n  root: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = struct({\n  subscription: 'number',\n  result: SlotInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(SignatureStatusResult),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = struct({\n  subscription: 'number',\n  result: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetParsedProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ParsedProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getSlot\" message\n */\nconst GetSlot = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\nconst GetSlotLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      pubkey: 'string',\n      gossip: struct.union(['null', 'string']),\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n      version: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  struct({\n    current: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n    delinquent: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.union([\n      'null',\n      struct.pick({\n        slot: 'number',\n        confirmations: struct.union(['number', 'null']),\n        err: TransactionErrorResult,\n      }),\n    ]),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult('number');\n\n/**\n * @private\n */\nconst ConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array(['string']),\n    header: struct({\n      numRequiredSignatures: 'number',\n      numReadonlySignedAccounts: 'number',\n      numReadonlyUnsignedAccounts: 'number',\n    }),\n    instructions: struct.array([\n      struct({\n        accounts: struct.array(['number']),\n        data: 'string',\n        programIdIndex: 'number',\n      }),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ParsedConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array([\n      struct({\n        pubkey: 'string',\n        signer: 'boolean',\n        writable: 'boolean',\n      }),\n    ]),\n    instructions: struct.array([\n      struct.union([\n        struct({\n          accounts: struct.array(['string']),\n          data: 'string',\n          programId: 'string',\n        }),\n        struct({\n          parsed: 'any',\n          program: 'string',\n          programId: 'string',\n        }),\n      ]),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      blockhash: 'string',\n      previousBlockhash: 'string',\n      parentSlot: 'number',\n      transactions: struct.array([\n        struct({\n          transaction: ConfirmedTransactionResult,\n          meta: ConfirmedTransactionMetaResult,\n        }),\n      ]),\n      rewards: struct.union([\n        'undefined',\n        struct.array([\n          struct({\n            pubkey: 'string',\n            lamports: 'number',\n          }),\n        ]),\n      ]),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ConfirmedTransactionResult,\n      meta: ConfirmedTransactionMetaResult,\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ParsedConfirmedTransactionResult,\n      meta: ConfirmedTransactionMetaResult,\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  struct({\n    blockhash: 'string',\n    feeCalculator: struct({\n      lamportsPerSignature: 'number',\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  struct.union([\n    'null',\n    struct({\n      feeCalculator: struct({\n        lamportsPerSignature: 'number',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information about the latest slot being processed by a node\n *\n * @typedef {Object} SlotInfo\n * @property {number} slot Currently processing slot\n * @property {number} parent Parent of the current slot\n * @property {number} root The root block of the current slot's fork\n */\ntype SlotInfo = {\n  slot: number,\n  parent: number,\n  root: number,\n};\n\n/**\n * Parsed account data\n *\n * @typedef {Object} ParsedAccountData\n * @property {string} program Name of the program that owns this account\n * @property {any} parsed Parsed account data\n * @property {number} space Space used by account data\n */\ntype ParsedAccountData = {\n  program: string,\n  parsed: any,\n  space: number,\n};\n\n/**\n * Stake Activation data\n *\n * @typedef {Object} StakeActivationData\n * @property {string} state: <string - the stake account's activation state, one of: active, inactive, activating, deactivating\n * @property {number} active: stake active during the epoch\n * @property {number} inactive: stake inactive during the epoch\n */\ntype StakeActivationData = {\n  state: 'active' | 'inactive' | 'activating' | 'deactivating',\n  active: number,\n  inactive: number,\n};\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {T} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo<T> = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: T,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo<Buffer>} accountInfo\n */\ntype KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @private\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature, // TransactionSignature as a base 58 string\n  callback: SignatureResultCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @private\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Signature result\n *\n * @typedef {Object} SignatureResult\n */\nexport type SignatureResult = {|\n  err: TransactionError | null,\n|};\n\n/**\n * Transaction error\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {};\n\n/**\n * Signature status\n *\n * @typedef {Object} SignatureStatus\n * @property {number} slot when the transaction was processed\n * @property {number | null} confirmations the number of blocks that have been confirmed and voted on in the fork containing `slot` (TODO)\n * @property {TransactionError | null} err error, if any\n */\nexport type SignatureStatus = {\n  slot: number,\n  confirmations: number | null,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed signature with its status\n *\n * @typedef {Object} ConfirmedSignatureInfo\n * @property {string} signature the transaction signature\n * @property {number} slot when the transaction was processed\n * @property {TransactionError | null} err error, if any\n * @property {string | null} memo memo associated with the transaction, if any\n */\nexport type ConfirmedSignatureInfo = {\n  signature: string,\n  slot: number,\n  err: TransactionError | null,\n  memo: string | null,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n  _rpcWebSocketHeartbeat: IntervalID | null = null;\n  _rpcWebSocketIdleTimeout: TimeoutID | null = null;\n\n  _commitment: ?Commitment;\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    lastFetch: Date,\n    simulatedSignatures: Array<string>,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _pollingBlockhash: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n  _slotSubscriptions: {\n    [number]: SlotSubscriptionInfo,\n  } = {};\n  _slotSubscriptionCounter: number = 0;\n  _signatureSubscriptions: {\n    [number]: SignatureSubscriptionInfo,\n  } = {};\n  _signatureSubscriptionCounter: number = 0;\n  _rootSubscriptions: {\n    [number]: RootSubscriptionInfo,\n  } = {};\n  _rootSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment: ?Commitment) {\n    let url = urlParse(endpoint);\n\n    this._rpcRequest = createRpcRequest(url.href);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: new Date(0),\n      transactionSignatures: [],\n      simulatedSignatures: [],\n    };\n\n    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    url.host = '';\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): ?Commitment {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = GetBalanceAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = GetBlockTimeRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = GetSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value.nonCirculatingAccounts = res.result.value.nonCirculatingAccounts.map(\n      account => new PublicKey(account),\n    );\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = GetTokenSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = GetTokenAccountBalance(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => {\n        assert(result.account.data[1] === 'base64');\n        return {\n          pubkey: new PublicKey(result.pubkey),\n          account: {\n            executable: result.account.executable,\n            owner: new PublicKey(result.account.owner),\n            lamports: result.account.lamports,\n            data: Buffer.from(result.account.data[0], 'base64'),\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetParsedTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => ({\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: result.account.data,\n        },\n      })),\n    };\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config: ?GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = GetLargestAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(({address, lamports}) => ({\n      address: new PublicKey(address),\n      lamports,\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = GetTokenLargestAccountsResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(pair => ({\n      ...pair,\n      address: new PublicKey(pair.address),\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetAccountInfoAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data} = res.result.value;\n      assert(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>,\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetParsedAccountInfoResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data: resultData} = res.result.value;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data,\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    return await this.getAccountInfoAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n    epoch: ?number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = GetStakeActivationResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    const {state, active, inactive} = res.result;\n    return {state, active, inactive};\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>> {\n    const args = this._buildArgs([programId.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      assert(result.account.data[1] === 'base64');\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: Buffer.from(result.account.data[0], 'base64'),\n        },\n      };\n    });\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey,\n      account: AccountInfo<Buffer | ParsedAccountData>,\n    }>,\n  > {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetParsedProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      const resultData = result.account.data;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data,\n        },\n      };\n    });\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   *\n   * If `commitment` is not specified, default to 'max'.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment: Commitment = commitment || 'max';\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result, context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve();\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'recent':\n      case 'single':\n      case 'singleGossip': {\n        timeoutMs = 10 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(2)} seconds`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment: ?Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = GetVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = GetSlot(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment: ?Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = GetSlotLeader(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(value.length === 1);\n    return {context, value: value[0]};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = GetSignatureStatusesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('faied to get total supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment: ?Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = GetInflationGovernorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetInflationGovernorResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment: ?Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = GetEpochInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochInfoResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = GetEpochScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochScheduleResult(res.result);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = GetLeaderScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = GetMinimumBalanceForRentExemptionRpcResult(unsafeRes);\n    if (res.error) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>,\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n\n    const res = GetRecentBlockhashAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = GetFeeCalculatorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value && value.feeCalculator,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment: ?Commitment,\n  ): Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}> {\n    return await this.getRecentBlockhashAndContext(commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error('failed to get recent blockhash: ' + e);\n      });\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = GetVersionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const {result, error} = GetConfirmedBlockRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed block: ' + result.error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return {\n      blockhash: new PublicKey(result.blockhash).toString(),\n      previousBlockhash: new PublicKey(result.previousBlockhash).toString(),\n      parentSlot: result.parentSlot,\n      transactions: result.transactions.map(result => {\n        const {message, signatures} = result.transaction;\n        return {\n          transaction: Transaction.populate(new Message(message), signatures),\n          meta: result.meta,\n        };\n      }),\n      rewards: result.rewards || [],\n    };\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n    ]);\n    const {result, error} = GetConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) {\n      return result;\n    }\n\n    const {message, signatures} = result.transaction;\n    return {\n      slot: result.slot,\n      transaction: Transaction.populate(new Message(message), signatures),\n      meta: result.meta,\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n      'jsonParsed',\n    ]);\n    const {result, error} = GetParsedConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) return result;\n\n    const {\n      accountKeys,\n      instructions,\n      recentBlockhash,\n    } = result.transaction.message;\n    return {\n      slot: result.slot,\n      meta: result.meta,\n      transaction: {\n        signatures: result.transaction.signatures,\n        message: {\n          accountKeys: accountKeys.map(accountKey => ({\n            pubkey: new PublicKey(accountKey.pubkey),\n            signer: accountKey.signer,\n            writable: accountKey.writable,\n          })),\n          instructions: instructions.map(ix => {\n            let mapped: any = {programId: new PublicKey(ix.programId)};\n            if ('accounts' in ix) {\n              mapped.accounts = ix.accounts.map(key => new PublicKey(key));\n            }\n\n            return {\n              ...ix,\n              ...mapped,\n            };\n          }),\n          recentBlockhash,\n        },\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress',\n      [address.toBase58(), startSlot, endSlot],\n    );\n    const result = GetConfirmedSignaturesForAddressRpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options: ?ConfirmedSignaturesForAddress2Options,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      [address.toBase58(), options],\n    );\n    const result = GetConfirmedSignaturesForAddress2RpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const expired =\n        Date.now() - this._blockhashInfo.lastFetch >=\n        BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('max');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: new Date(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Account>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = bs58.encode(wireTransaction);\n    const args = [encodedTransaction];\n\n    if (signers) {\n      args.push({sigVerify: true});\n    }\n\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = SimulatedTransactionResponseValidator(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Account>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * @private\n   */\n  async validatorExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('validatorExit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error('validator exit failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = bs58.encode(toBuffer(rawTransaction));\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base58 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const args = [encodedTransaction];\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment;\n\n    if (skipPreflight && preflightCommitment) {\n      throw new Error(\n        'cannot set preflightCommitment when skipPreflight is enabled',\n      );\n    }\n\n    if (skipPreflight) {\n      args.push({skipPreflight});\n    } else if (preflightCommitment) {\n      args.push({preflightCommitment});\n    }\n\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number) {\n    clearInterval(this._rpcWebSocketHeartbeat);\n    this._rpcWebSocketHeartbeat = null;\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  async _subscribe<SubInfo: {subscriptionId: ?SubscriptionId}, RpcArgs>(\n    sub: SubInfo,\n    rpcMethod: string,\n    rpcArgs: RpcArgs,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _unsubscribe<SubInfo: {subscriptionId: ?SubscriptionId}>(\n    sub: SubInfo,\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetSubscriptions() {\n    (Object.values(this._accountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._programAccountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._signatureSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._slotSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._rootSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @private\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      this._subscribe(\n        sub,\n        'signatureSubscribe',\n        this._buildArgs([sub.signature], sub.commitment),\n      );\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error('account notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.data[1] === 'base64');\n        sub.callback(\n          {\n            executable: value.executable,\n            owner: new PublicKey(value.owner),\n            lamports: value.lamports,\n            data: Buffer.from(value.data[0], 'base64'),\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ProgramAccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(\n        'program account notification failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.account.data[1] === 'base64');\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: {\n              executable: value.account.executable,\n              owner: new PublicKey(value.account.owner),\n              lamports: value.account.lamports,\n              data: Buffer.from(value.account.data[0], 'base64'),\n            },\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = SlotNotificationResult(notification);\n    if (res.error) {\n      throw new Error('slot notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {parent, slot, root} = res.result;\n    const keys = Object.keys(this._slotSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._slotSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback({\n          parent,\n          slot,\n          root,\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override: ?Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = SignatureNotificationResult(notification);\n    if (res.error) {\n      throw new Error('signature notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._signatureSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._signatureSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        // Signatures subscriptions are auto-removed by the RPC service so\n        // no need to explicitly send an unsubscribe message\n        delete this._signatureSubscriptions[id];\n        this._updateSubscriptions();\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = RootNotificationResult(notification);\n    if (res.error) {\n      throw new Error('root notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const root = res.result;\n    const keys = Object.keys(this._rootSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._rootSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(root);\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {Account} from '../account';\nimport type {ConfirmOptions} from '../connection';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    options,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\nexport type InstructionType = {|\n  index: number,\n  layout: typeof BufferLayout,\n|};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n */\nexport function encodeData(type: InstructionType, fields: Object): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): Object {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer system transaction params\n * @typedef {Object} TransferParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type TransferParams = {|\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Assign system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} programId\n */\nexport type AssignParams = {|\n  accountPubkey: PublicKey,\n  programId: PublicKey,\n|};\n\n/**\n * Create account with seed system transaction params\n * @typedef {Object} CreateAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Create nonce account system transaction params\n * @typedef {Object} CreateNonceAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {number} lamports\n */\nexport type CreateNonceAccountParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Create nonce account with seed system transaction params\n * @typedef {Object} CreateNonceAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n */\nexport type CreateNonceAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n  basePubkey: PublicKey,\n  seed: string,\n|};\n\n/**\n * Initialize nonce account system instruction params\n * @typedef {Object} InitializeNonceParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type InitializeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Advance nonce account system instruction params\n * @typedef {Object} AdvanceNonceParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type AdvanceNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Withdraw nonce account system transaction params\n * @typedef {Object} WithdrawNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Authorize nonce account system transaction params\n * @typedef {Object} AuthorizeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n */\nexport type AuthorizeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n|};\n\n/**\n * Allocate account system transaction params\n * @typedef {Object} AllocateParams\n * @property {PublicKey} accountPubkey\n * @property {number} space\n */\nexport type AllocateParams = {|\n  accountPubkey: PublicKey,\n  space: number,\n|};\n\n/**\n * Allocate account with seed system transaction params\n * @typedef {Object} AllocateWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type AllocateWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Assign account with seed system transaction params\n * @typedef {Object} AssignWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type AssignWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (SYSTEM_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n * @typedef {'Create' | 'Assign' | 'Transfer' | 'CreateWithSeed'\n | 'AdvanceNonceAccount' | 'WithdrawNonceAccount' | 'InitializeNonceAccount'\n | 'AuthorizeNonceAccount'} SystemInstructionType\n */\nexport type SystemInstructionType = $Keys<typeof SYSTEM_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid system InstructionType's\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('11111111111111111111111111111111');\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params: TransferParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {programId: params.programId.toBuffer()});\n    }\n\n    return new TransactionInstruction({\n      keys: [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: params.basePubkey.toBuffer(),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if (params.basePubkey && params.seed) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.authorizedPubkey.toBuffer(),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.newAuthorizedPubkey.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        space: params.space,\n        programId: params.programId.toBuffer(),\n      });\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys: [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Math.ceil(dataLength / Loader.chunkSize);\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'single',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'single',\n            skipPreflight: true,\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'single',\n          skipPreflight: true,\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      const REQUESTS_PER_SECOND = 4;\n      await sleep(1000 / REQUESTS_PER_SECOND);\n\n      // Run up to 8 Loads in parallel to prevent too many parallel transactions from\n      // getting retried due to AccountInUse errors.\n      //\n      // TODO: 8 was selected empirically and should probably be revisited\n      if (transactions.length === 8) {\n        await Promise.all(transactions);\n        transactions = [];\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'single',\n          skipPreflight: true,\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\nexport class Authorized {\n  staker: PublicKey;\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\nexport class Lockup {\n  unixTimestamp: number;\n  epoch: number;\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n}\n\n/**\n * Create stake account transaction params\n * @typedef {Object} CreateStakeAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Create stake account with seed transaction params\n * @typedef {Object} CreateStakeAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Initialize stake instruction params\n * @typedef {Object} InitializeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n */\nexport type InitializeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n|};\n\n/**\n * Delegate stake instruction params\n * @typedef {Object} DelegateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} votePubkey\n */\nexport type DelegateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  votePubkey: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params\n * @typedef {Object} AuthorizeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n */\nexport type AuthorizeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n|};\n\n/**\n * Authorize stake instruction params using a derived key\n * @typedef {Object} AuthorizeWithSeedStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorityBase\n * @property {string} authoritySeed\n * @property {PublicKey} authorityOwner\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n */\nexport type AuthorizeWithSeedStakeParams = {|\n  stakePubkey: PublicKey,\n  authorityBase: PublicKey,\n  authoritySeed: string,\n  authorityOwner: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n|};\n\n/**\n * Split stake instruction params\n * @typedef {Object} SplitStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} splitStakePubkey\n * @property {number} lamports\n */\nexport type SplitStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  splitStakePubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Withdraw stake instruction params\n * @typedef {Object} WithdrawStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Deactivate stake instruction params\n * @typedef {Object} DeactivateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type DeactivateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (STAKE_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n * @typedef { 'Initialize' | 'Authorize' | 'AuthorizeWithSeed' | 'Delegate' | 'Split' | 'Withdraw'\n | 'Deactivate' } StakeInstructionType\n */\nexport type StakeInstructionType = $Keys<typeof STAKE_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid stake InstructionType's\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\nexport type StakeAuthorizationType = {|\n  index: number,\n|};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * Public key that identifies the Stake program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Stake11111111111111111111111111111111111111');\n  }\n\n  /**\n   * Max space of a Stake account\n   */\n  static get space(): number {\n    return 4008;\n  }\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: authorized.staker.toBuffer(),\n        withdrawer: authorized.withdrawer.toBuffer(),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: lockup.custodian.toBuffer(),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorityBase, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: toPubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {struct} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @private\n */\ntype ConfigKey = {|\n  publicKey: PublicKey,\n  isSigner: boolean,\n|};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {|\n  name: string,\n  website?: string,\n  details?: string,\n  keybaseUsername?: string,\n|};\n\nconst InfoString = struct({\n  name: 'string',\n  website: 'string?',\n  details: 'string?',\n  keybaseUsername: 'string?',\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = InfoString(JSON.parse(rawInfo));\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {|\n  slot: number,\n  confirmationCount: number,\n|};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {|\n  epoch: number,\n  credits: number,\n  prevCredits: number,\n|};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    va.nodePubkey = new PublicKey(va.nodePubkey);\n    va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n    va.authorizedWithdrawerPubkey = new PublicKey(\n      va.authorizedWithdrawerPubkey,\n    );\n    if (!va.rootSlotValid) {\n      va.rootSlot = null;\n    }\n    return va;\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    options,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","//@flow\n\n/**\n * @private\n */\nconst endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","// @flow\nexport {Account} from './account';\nexport {BPF_LOADER_DEPRECATED_PROGRAM_ID} from './bpf-loader-deprecated';\nexport {BpfLoader, BPF_LOADER_PROGRAM_ID} from './bpf-loader';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {Message} from './message';\nexport {NonceAccount, NONCE_ACCOUNT_LENGTH} from './nonce-account';\nexport {PublicKey} from './publickey';\nexport {\n  STAKE_CONFIG_ID,\n  Authorized,\n  Lockup,\n  StakeAuthorizationLayout,\n  StakeInstruction,\n  STAKE_INSTRUCTION_LAYOUTS,\n  StakeProgram,\n} from './stake-program';\nexport {\n  SystemInstruction,\n  SystemProgram,\n  SYSTEM_INSTRUCTION_LAYOUTS,\n} from './system-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {VALIDATOR_INFO_KEY, ValidatorInfo} from './validator-info';\nexport {VOTE_PROGRAM_ID, VoteAccount} from './vote-account';\nexport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nexport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nexport {sendAndConfirmRawTransaction} from './util/send-and-confirm-raw-transaction';\nexport {clusterApiUrl} from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","from","buffer","byteOffset","byteLength","naclLowLevel","nacl","lowlevel","PublicKey","value","decoded","bs58","decode","length","Error","_bn","BN","publicKey","eq","encode","b","toArrayLike","zeroPad","alloc","copy","toBase58","fromPublicKey","seed","programId","concat","sha256","hash","seeds","forEach","publicKeyBytes","toArray","is_on_curve","nonce","seedsWithNonce","createProgramAddress","address","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","bind","_encode","offset","data","chars","toString","str","span","authorized","lockup","getAlloc","type","fields","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","map","account","recentBlockhash","instructions","index","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","signer","findIndex","accountKey","equals","numKeys","keyCount","shortvec","instruction","accounts","programIdIndex","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","slice","signDataLayout","Layout","transaction","keys","key","signData","byteArray","accountCount","i","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Object","assign","Transaction","signatures","signature","items","nonceInfo","nonceInstruction","unshift","feePayer","programIds","accountMetas","accountMeta","includes","pubkey","isSigner","isWritable","sort","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","signatureIndex","isPayer","splice","payerMeta","signedKeys","unsignedKeys","indexOf","keyObj","invariant","keyIndex","compileMessage","serialize","signers","seen","Set","filter","has","add","partialSign","message","xIndex","findSignerIndex","yIndex","detached","addSignature","sigpair","_verifySignatures","serializeMessage","requireAllSignatures","verify","config","verifySignatures","_serialize","signatureCount","transactionLength","wireTransaction","populate","sigPubkeyPair","some","isAccountWritable","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","nonceAccount","authorizedPubkey","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","sleep","ms","Promise","resolve","setTimeout","promiseTimeout","promise","timeoutMs","timeoutId","timeoutPromise","race","then","result","clearTimeout","DESTROY_TIMEOUT_MS","AgentManager","_newAgent","process","browser","_activeRequests","_destroyTimeout","_agent","destroy","Agent","keepAlive","maxSockets","BLOCKHASH_CACHE_TIMEOUT_MS","jsonRpcResultAndContext","resultDescription","jsonRpcResult","context","struct","slot","jsonRpcVersion","literal","union","jsonrpc","id","error","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","epoch","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","err","Version","pick","SimulatedTransactionResponseValidator","logs","array","createRpcRequest","url","agentManager","server","jayson","request","callback","agent","requestStart","options","method","body","headers","too_many_requests_retries","res","waitTime","fetch","status","console","log","statusText","text","ok","requestEnd","reject","response","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","GetBalanceAndContextRpcResult","GetBlockTimeRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","object","amount","uiAmount","decimals","GetTokenLargestAccountsResult","GetTokenAccountBalance","GetTokenSupplyRpcResult","GetTokenAccountsByOwner","executable","owner","lamports","rentEpoch","GetParsedTokenAccountsByOwner","program","parsed","space","GetLargestAccountsRpcResult","GetVersionRpcResult","AccountInfoResult","ParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetAccountInfoAndContextRpcResult","GetParsedAccountInfoResult","GetStakeActivationResult","GetConfirmedSignaturesForAddressRpcResult","GetConfirmedSignaturesForAddress2RpcResult","memo","AccountNotificationResult","subscription","ProgramAccountInfoResult","ParsedProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SignatureNotificationResult","RootNotificationResult","GetProgramAccountsRpcResult","GetParsedProgramAccountsRpcResult","GetSlot","GetSlotLeader","GetClusterNodes","gossip","tpu","rpc","version","GetVoteAccounts","current","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","tuple","commission","lastVote","rootSlot","delinquent","GetSignatureStatusesRpcResult","confirmations","GetTransactionCountRpcResult","GetTotalSupplyRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedConfirmedTransactionResult","writable","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","transactions","meta","rewards","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","feeCalculator","lamportsPerSignature","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","Connection","endpoint","commitment","urlParse","_rpcRequest","href","_commitment","_blockhashInfo","lastFetch","Date","transactionSignatures","simulatedSignatures","protocol","host","port","String","Number","_rpcWebSocket","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSignatureNotification","_wsOnRootNotification","_buildArgs","unsafeRes","assert","getBalanceAndContext","e","tokenMintAddress","tokenAddress","ownerAddress","_args","mint","arg","mintAddress","pair","resultData","getAccountInfoAndContext","undefined","decodedSignature","start","now","subscriptionCommitment","confirmPromise","subscriptionId","onSignature","removeSignatureListener","duration","toFixed","getSignatureStatuses","params","warn","getRecentBlockhashAndContext","ix","mapped","startSlot","endSlot","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","_pollingBlockhash","expired","_pollNewBlockhash","startTime","getRecentBlockhash","_disableBlockhashCaching","_recentBlockhash","encodedTransaction","sigVerify","sendRawTransaction","rawTransaction","sendEncodedTransaction","skipPreflight","preflightCommitment","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","setInterval","notify","_updateSubscriptions","code","clearInterval","_resetSubscriptions","sub","rpcMethod","rpcArgs","call","unsubscribeId","values","_accountChangeSubscriptions","s","_programAccountChangeSubscriptions","_signatureSubscriptions","_slotSubscriptions","_rootSubscriptions","programKeys","slotKeys","signatureKeys","rootKeys","_rpcWebSocketIdleTimeout","close","connect","_subscribe","notification","_accountChangeSubscriptionCounter","subInfo","_unsubscribe","accountId","_programAccountChangeSubscriptionCounter","_slotSubscriptionCounter","override","encoding","extra","_signatureSubscriptionCounter","_rootSubscriptionCounter","sendAndConfirmTransaction","connection","sendTransaction","confirmTransaction","JSON","stringify","encodeData","allocLength","layoutFields","decodeData","SystemInstruction","checkProgramId","instructionTypeLayout","typeIndex","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","Allocate","accountPubkey","AllocateWithSeed","base","basePubkey","Assign","AssignWithSeed","CreateWithSeed","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","Loader","Math","ceil","chunkSize","payer","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","allocate","transfer","dataLayout","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","Initialize","stakePubkey","Delegate","Authorize","newAuthorized","stakeAuthorizationType","AuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","Split","splitStakePubkey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","info","configKeyCount","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","va","authorizedVoterPubkey","authorizedWithdrawerPubkey","rootSlotValid","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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"}