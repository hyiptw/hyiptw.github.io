{"ast":null,"code":"import{Numberu64}from\"@solana/spl-token-swap\";import{TransactionInstruction}from\"@solana/web3.js\";import*as BufferLayout from\"buffer-layout\";export{TokenSwap}from\"@solana/spl-token-swap\";/**\n * Layout for a public key\n */export var publicKey=function publicKey(){var property=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"publicKey\";return BufferLayout.blob(32,property);};/**\n * Layout for a 64bit unsigned value\n */export var uint64=function uint64(){var property=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"uint64\";return BufferLayout.blob(8,property);};export var TokenSwapLayoutLegacyV0=BufferLayout.struct([BufferLayout.u8(\"isInitialized\"),BufferLayout.u8(\"nonce\"),publicKey(\"tokenAccountA\"),publicKey(\"tokenAccountB\"),publicKey(\"tokenPool\"),uint64(\"feesNumerator\"),uint64(\"feesDenominator\")]);export var TokenSwapLayout=BufferLayout.struct([BufferLayout.u8(\"isInitialized\"),BufferLayout.u8(\"nonce\"),publicKey(\"tokenProgramId\"),publicKey(\"tokenAccountA\"),publicKey(\"tokenAccountB\"),publicKey(\"tokenPool\"),publicKey(\"mintA\"),publicKey(\"mintB\"),publicKey(\"feeAccount\"),BufferLayout.u8(\"curveType\"),uint64(\"tradeFeeNumerator\"),uint64(\"tradeFeeDenominator\"),uint64(\"ownerTradeFeeNumerator\"),uint64(\"ownerTradeFeeDenominator\"),uint64(\"ownerWithdrawFeeNumerator\"),uint64(\"ownerWithdrawFeeDenominator\"),BufferLayout.blob(16,\"padding\")]);export var createInitSwapInstruction=function createInitSwapInstruction(tokenSwapAccount,authority,tokenAccountA,tokenAccountB,tokenPool,feeAccount,tokenAccountPool,tokenProgramId,swapProgramId,nonce,curveType,tradeFeeNumerator,tradeFeeDenominator,ownerTradeFeeNumerator,ownerTradeFeeDenominator,ownerWithdrawFeeNumerator,ownerWithdrawFeeDenominator){var keys=[{pubkey:tokenSwapAccount.publicKey,isSigner:false,isWritable:true},{pubkey:authority,isSigner:false,isWritable:false},{pubkey:tokenAccountA,isSigner:false,isWritable:false},{pubkey:tokenAccountB,isSigner:false,isWritable:false},{pubkey:tokenPool,isSigner:false,isWritable:true},{pubkey:feeAccount,isSigner:false,isWritable:false},{pubkey:tokenAccountPool,isSigner:false,isWritable:true},{pubkey:tokenProgramId,isSigner:false,isWritable:false}];var commandDataLayout=BufferLayout.struct([BufferLayout.u8(\"instruction\"),BufferLayout.u8(\"nonce\"),BufferLayout.u8(\"curveType\"),BufferLayout.nu64(\"tradeFeeNumerator\"),BufferLayout.nu64(\"tradeFeeDenominator\"),BufferLayout.nu64(\"ownerTradeFeeNumerator\"),BufferLayout.nu64(\"ownerTradeFeeDenominator\"),BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"),BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"),BufferLayout.blob(16,\"padding\")]);var data=Buffer.alloc(1024);{var encodeLength=commandDataLayout.encode({instruction:0,// InitializeSwap instruction\nnonce:nonce,curveType:curveType,tradeFeeNumerator:tradeFeeNumerator,tradeFeeDenominator:tradeFeeDenominator,ownerTradeFeeNumerator:ownerTradeFeeNumerator,ownerTradeFeeDenominator:ownerTradeFeeDenominator,ownerWithdrawFeeNumerator:ownerWithdrawFeeNumerator,ownerWithdrawFeeDenominator:ownerWithdrawFeeDenominator},data);data=data.slice(0,encodeLength);}return new TransactionInstruction({keys:keys,programId:swapProgramId,data:data});};export var depositInstruction=function depositInstruction(tokenSwap,authority,sourceA,sourceB,intoA,intoB,poolToken,poolAccount,swapProgramId,tokenProgramId,poolTokenAmount,maximumTokenA,maximumTokenB){var dataLayout=BufferLayout.struct([BufferLayout.u8(\"instruction\"),uint64(\"poolTokenAmount\"),uint64(\"maximumTokenA\"),uint64(\"maximumTokenB\")]);var data=Buffer.alloc(dataLayout.span);dataLayout.encode({instruction:2,// Deposit instruction\npoolTokenAmount:new Numberu64(poolTokenAmount).toBuffer(),maximumTokenA:new Numberu64(maximumTokenA).toBuffer(),maximumTokenB:new Numberu64(maximumTokenB).toBuffer()},data);var keys=[{pubkey:tokenSwap,isSigner:false,isWritable:false},{pubkey:authority,isSigner:false,isWritable:false},{pubkey:sourceA,isSigner:false,isWritable:true},{pubkey:sourceB,isSigner:false,isWritable:true},{pubkey:intoA,isSigner:false,isWritable:true},{pubkey:intoB,isSigner:false,isWritable:true},{pubkey:poolToken,isSigner:false,isWritable:true},{pubkey:poolAccount,isSigner:false,isWritable:true},{pubkey:tokenProgramId,isSigner:false,isWritable:false}];return new TransactionInstruction({keys:keys,programId:swapProgramId,data:data});};export var withdrawInstruction=function withdrawInstruction(tokenSwap,authority,poolMint,feeAccount,sourcePoolAccount,fromA,fromB,userAccountA,userAccountB,swapProgramId,tokenProgramId,poolTokenAmount,minimumTokenA,minimumTokenB){var dataLayout=BufferLayout.struct([BufferLayout.u8(\"instruction\"),uint64(\"poolTokenAmount\"),uint64(\"minimumTokenA\"),uint64(\"minimumTokenB\")]);var data=Buffer.alloc(dataLayout.span);dataLayout.encode({instruction:3,// Withdraw instruction\npoolTokenAmount:new Numberu64(poolTokenAmount).toBuffer(),minimumTokenA:new Numberu64(minimumTokenA).toBuffer(),minimumTokenB:new Numberu64(minimumTokenB).toBuffer()},data);var keys=[{pubkey:tokenSwap,isSigner:false,isWritable:false},{pubkey:authority,isSigner:false,isWritable:false},{pubkey:poolMint,isSigner:false,isWritable:true},{pubkey:sourcePoolAccount,isSigner:false,isWritable:true},{pubkey:fromA,isSigner:false,isWritable:true},{pubkey:fromB,isSigner:false,isWritable:true},{pubkey:userAccountA,isSigner:false,isWritable:true},{pubkey:userAccountB,isSigner:false,isWritable:true}];if(feeAccount){keys.push({pubkey:feeAccount,isSigner:false,isWritable:true});}keys.push({pubkey:tokenProgramId,isSigner:false,isWritable:false});return new TransactionInstruction({keys:keys,programId:swapProgramId,data:data});};export var swapInstruction=function swapInstruction(tokenSwap,authority,userSource,poolSource,poolDestination,userDestination,poolMint,feeAccount,swapProgramId,tokenProgramId,amountIn,minimumAmountOut,programOwner){var dataLayout=BufferLayout.struct([BufferLayout.u8(\"instruction\"),uint64(\"amountIn\"),uint64(\"minimumAmountOut\")]);var keys=[{pubkey:tokenSwap,isSigner:false,isWritable:false},{pubkey:authority,isSigner:false,isWritable:false},{pubkey:userSource,isSigner:false,isWritable:true},{pubkey:poolSource,isSigner:false,isWritable:true},{pubkey:poolDestination,isSigner:false,isWritable:true},{pubkey:userDestination,isSigner:false,isWritable:true},{pubkey:poolMint,isSigner:false,isWritable:true},{pubkey:feeAccount,isSigner:false,isWritable:true},{pubkey:tokenProgramId,isSigner:false,isWritable:false}];// optional depending on the build of token-swap program\nif(programOwner){keys.push({pubkey:programOwner,isSigner:false,isWritable:true});}var data=Buffer.alloc(dataLayout.span);dataLayout.encode({instruction:1,// Swap instruction\namountIn:new Numberu64(amountIn).toBuffer(),minimumAmountOut:new Numberu64(minimumAmountOut).toBuffer()},data);return new TransactionInstruction({keys:keys,programId:swapProgramId,data:data});};","map":null,"metadata":{},"sourceType":"module"}