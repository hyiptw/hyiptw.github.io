{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DexInstructions = exports.decodeInstruction = exports.encodeInstruction = exports.INSTRUCTION_LAYOUT = exports.NEW_ORDER_OWNER_INDEX = exports.NEW_ORDER_OPEN_ORDERS_INDEX = exports.SETTLE_FUNDS_QUOTE_WALLET_INDEX = exports.SETTLE_FUNDS_BASE_WALLET_INDEX = void 0;\n\nvar buffer_layout_1 = require(\"buffer-layout\");\n\nvar layout_1 = require(\"./layout\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar token_instructions_1 = require(\"./token-instructions\"); // NOTE: Update these if the position of arguments for the settleFunds instruction changes\n\n\nexports.SETTLE_FUNDS_BASE_WALLET_INDEX = 5;\nexports.SETTLE_FUNDS_QUOTE_WALLET_INDEX = 6; // NOTE: Update these if the position of arguments for the newOrder instruction changes\n\nexports.NEW_ORDER_OPEN_ORDERS_INDEX = 1;\nexports.NEW_ORDER_OWNER_INDEX = 4;\nexports.INSTRUCTION_LAYOUT = new layout_1.VersionedLayout(0, buffer_layout_1.union(buffer_layout_1.u32('instruction')));\nexports.INSTRUCTION_LAYOUT.inner.addVariant(0, buffer_layout_1.struct([layout_1.u64('baseLotSize'), layout_1.u64('quoteLotSize'), buffer_layout_1.u16('feeRateBps'), layout_1.u64('vaultSignerNonce'), layout_1.u64('quoteDustThreshold')]), 'initializeMarket');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(1, buffer_layout_1.struct([layout_1.sideLayout('side'), layout_1.u64('limitPrice'), layout_1.u64('maxQuantity'), layout_1.orderTypeLayout('orderType'), layout_1.u64('clientId')]), 'newOrder');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(2, buffer_layout_1.struct([buffer_layout_1.u16('limit')]), 'matchOrders');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(3, buffer_layout_1.struct([buffer_layout_1.u16('limit')]), 'consumeEvents');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(4, buffer_layout_1.struct([layout_1.sideLayout('side'), layout_1.u128('orderId'), layout_1.publicKeyLayout('openOrders'), buffer_layout_1.u8('openOrdersSlot')]), 'cancelOrder');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(5, buffer_layout_1.struct([]), 'settleFunds');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(6, buffer_layout_1.struct([layout_1.u64('clientId')]), 'cancelOrderByClientId');\n\nfunction encodeInstruction(instruction) {\n  var b = Buffer.alloc(100);\n  return b.slice(0, exports.INSTRUCTION_LAYOUT.encode(instruction, b));\n}\n\nexports.encodeInstruction = encodeInstruction;\n\nfunction decodeInstruction(message) {\n  return exports.INSTRUCTION_LAYOUT.decode(message);\n}\n\nexports.decodeInstruction = decodeInstruction;\n\nvar DexInstructions = /*#__PURE__*/function () {\n  function DexInstructions() {\n    _classCallCheck(this, DexInstructions);\n  }\n\n  _createClass(DexInstructions, null, [{\n    key: \"initializeMarket\",\n    value: function initializeMarket(_ref) {\n      var market = _ref.market,\n          requestQueue = _ref.requestQueue,\n          eventQueue = _ref.eventQueue,\n          bids = _ref.bids,\n          asks = _ref.asks,\n          baseVault = _ref.baseVault,\n          quoteVault = _ref.quoteVault,\n          baseMint = _ref.baseMint,\n          quoteMint = _ref.quoteMint,\n          baseLotSize = _ref.baseLotSize,\n          quoteLotSize = _ref.quoteLotSize,\n          feeRateBps = _ref.feeRateBps,\n          vaultSignerNonce = _ref.vaultSignerNonce,\n          quoteDustThreshold = _ref.quoteDustThreshold,\n          programId = _ref.programId;\n      return new web3_js_1.TransactionInstruction({\n        keys: [{\n          pubkey: market,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: requestQueue,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: eventQueue,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: bids,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: asks,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: baseVault,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: quoteVault,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: baseMint,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: quoteMint,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: programId,\n        data: encodeInstruction({\n          initializeMarket: {\n            baseLotSize: baseLotSize,\n            quoteLotSize: quoteLotSize,\n            feeRateBps: feeRateBps,\n            vaultSignerNonce: vaultSignerNonce,\n            quoteDustThreshold: quoteDustThreshold\n          }\n        })\n      });\n    }\n  }, {\n    key: \"newOrder\",\n    value: function newOrder(_ref2) {\n      var market = _ref2.market,\n          openOrders = _ref2.openOrders,\n          payer = _ref2.payer,\n          owner = _ref2.owner,\n          requestQueue = _ref2.requestQueue,\n          baseVault = _ref2.baseVault,\n          quoteVault = _ref2.quoteVault,\n          side = _ref2.side,\n          limitPrice = _ref2.limitPrice,\n          maxQuantity = _ref2.maxQuantity,\n          orderType = _ref2.orderType,\n          clientId = _ref2.clientId,\n          programId = _ref2.programId,\n          _ref2$feeDiscountPubk = _ref2.feeDiscountPubkey,\n          feeDiscountPubkey = _ref2$feeDiscountPubk === void 0 ? null : _ref2$feeDiscountPubk;\n      var keys = [{\n        pubkey: market,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: openOrders,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: requestQueue,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: payer,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: baseVault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: quoteVault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: token_instructions_1.TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }];\n\n      if (feeDiscountPubkey) {\n        keys.push({\n          pubkey: feeDiscountPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n\n      return new web3_js_1.TransactionInstruction({\n        keys: keys,\n        programId: programId,\n        data: encodeInstruction({\n          newOrder: clientId ? {\n            side: side,\n            limitPrice: limitPrice,\n            maxQuantity: maxQuantity,\n            orderType: orderType,\n            clientId: clientId\n          } : {\n            side: side,\n            limitPrice: limitPrice,\n            maxQuantity: maxQuantity,\n            orderType: orderType\n          }\n        })\n      });\n    }\n  }, {\n    key: \"matchOrders\",\n    value: function matchOrders(_ref3) {\n      var market = _ref3.market,\n          requestQueue = _ref3.requestQueue,\n          eventQueue = _ref3.eventQueue,\n          bids = _ref3.bids,\n          asks = _ref3.asks,\n          baseVault = _ref3.baseVault,\n          quoteVault = _ref3.quoteVault,\n          limit = _ref3.limit,\n          programId = _ref3.programId;\n      return new web3_js_1.TransactionInstruction({\n        keys: [{\n          pubkey: market,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: requestQueue,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: eventQueue,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: bids,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: asks,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: baseVault,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: quoteVault,\n          isSigner: false,\n          isWritable: true\n        }],\n        programId: programId,\n        data: encodeInstruction({\n          matchOrders: {\n            limit: limit\n          }\n        })\n      });\n    }\n  }, {\n    key: \"consumeEvents\",\n    value: function consumeEvents(_ref4) {\n      var market = _ref4.market,\n          eventQueue = _ref4.eventQueue,\n          openOrdersAccounts = _ref4.openOrdersAccounts,\n          limit = _ref4.limit,\n          programId = _ref4.programId;\n      return new web3_js_1.TransactionInstruction({\n        keys: [].concat(_toConsumableArray(openOrdersAccounts.map(function (account) {\n          return {\n            pubkey: account,\n            isSigner: false,\n            isWritable: true\n          };\n        })), [{\n          pubkey: market,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: eventQueue,\n          isSigner: false,\n          isWritable: true\n        }]),\n        programId: programId,\n        data: encodeInstruction({\n          consumeEvents: {\n            limit: limit\n          }\n        })\n      });\n    }\n  }, {\n    key: \"cancelOrder\",\n    value: function cancelOrder(_ref5) {\n      var market = _ref5.market,\n          openOrders = _ref5.openOrders,\n          owner = _ref5.owner,\n          requestQueue = _ref5.requestQueue,\n          side = _ref5.side,\n          orderId = _ref5.orderId,\n          openOrdersSlot = _ref5.openOrdersSlot,\n          programId = _ref5.programId;\n      return new web3_js_1.TransactionInstruction({\n        keys: [{\n          pubkey: market,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: openOrders,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: requestQueue,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: owner,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: programId,\n        data: encodeInstruction({\n          cancelOrder: {\n            side: side,\n            orderId: orderId,\n            openOrders: openOrders,\n            openOrdersSlot: openOrdersSlot\n          }\n        })\n      });\n    }\n  }, {\n    key: \"cancelOrderByClientId\",\n    value: function cancelOrderByClientId(_ref6) {\n      var market = _ref6.market,\n          openOrders = _ref6.openOrders,\n          owner = _ref6.owner,\n          requestQueue = _ref6.requestQueue,\n          clientId = _ref6.clientId,\n          programId = _ref6.programId;\n      return new web3_js_1.TransactionInstruction({\n        keys: [{\n          pubkey: market,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: openOrders,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: requestQueue,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: owner,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: programId,\n        data: encodeInstruction({\n          cancelOrderByClientId: {\n            clientId: clientId\n          }\n        })\n      });\n    }\n  }, {\n    key: \"settleFunds\",\n    value: function settleFunds(_ref7) {\n      var market = _ref7.market,\n          openOrders = _ref7.openOrders,\n          owner = _ref7.owner,\n          baseVault = _ref7.baseVault,\n          quoteVault = _ref7.quoteVault,\n          baseWallet = _ref7.baseWallet,\n          quoteWallet = _ref7.quoteWallet,\n          vaultSigner = _ref7.vaultSigner,\n          programId = _ref7.programId,\n          _ref7$referrerQuoteWa = _ref7.referrerQuoteWallet,\n          referrerQuoteWallet = _ref7$referrerQuoteWa === void 0 ? null : _ref7$referrerQuoteWa;\n      var keys = [{\n        pubkey: market,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: openOrders,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: baseVault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: quoteVault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: baseWallet,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: quoteWallet,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: vaultSigner,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: token_instructions_1.TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }];\n\n      if (referrerQuoteWallet) {\n        keys.push({\n          pubkey: referrerQuoteWallet,\n          isSigner: false,\n          isWritable: true\n        });\n      }\n\n      return new web3_js_1.TransactionInstruction({\n        keys: keys,\n        programId: programId,\n        data: encodeInstruction({\n          settleFunds: {}\n        })\n      });\n    }\n  }]);\n\n  return DexInstructions;\n}();\n\nexports.DexInstructions = DexInstructions;","map":null,"metadata":{},"sourceType":"script"}