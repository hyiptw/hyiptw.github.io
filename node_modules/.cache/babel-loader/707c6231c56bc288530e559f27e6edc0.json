{"ast":null,"code":"import _objectWithoutProperties from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _toConsumableArray from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createForOfIteratorHelper from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _objectSpread from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _createClass from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _wrapNativeSuper from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";import React,{useCallback,useContext,useEffect,useState}from\"react\";import{useConnection}from\"./connection\";import{useWallet}from\"./wallet\";import{PublicKey}from\"@solana/web3.js\";import{programIds,SWAP_HOST_FEE_ADDRESS,WRAPPED_SOL_MINT}from\"./ids\";import{AccountLayout,u64,MintLayout}from\"@solana/spl-token\";import{usePools}from\"./pools\";import{notify}from\"./notifications\";import{chunks}from\"./utils\";var AccountsContext=React.createContext(null);var AccountUpdateEvent=/*#__PURE__*/function(_Event){_inherits(AccountUpdateEvent,_Event);var _super=_createSuper(AccountUpdateEvent);function AccountUpdateEvent(id){var _this;_classCallCheck(this,AccountUpdateEvent);_this=_super.call(this,AccountUpdateEvent.type);_this.id=void 0;_this.id=id;return _this;}return AccountUpdateEvent;}(/*#__PURE__*/_wrapNativeSuper(Event));AccountUpdateEvent.type=\"AccountUpdate\";var EventEmitter=/*#__PURE__*/function(_EventTarget){_inherits(EventEmitter,_EventTarget);var _super2=_createSuper(EventEmitter);function EventEmitter(){_classCallCheck(this,EventEmitter);return _super2.apply(this,arguments);}_createClass(EventEmitter,[{key:\"raiseAccountUpdated\",value:function raiseAccountUpdated(id){this.dispatchEvent(new AccountUpdateEvent(id));}}]);return EventEmitter;}(/*#__PURE__*/_wrapNativeSuper(EventTarget));var accountEmitter=new EventEmitter();var pendingMintCalls=new Map();var mintCache=new Map();var pendingAccountCalls=new Map();var accountsCache=new Map();var pendingCalls=new Map();var genericCache=new Map();var getAccountInfo=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,pubKey){var info;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return connection.getAccountInfo(pubKey);case 2:info=_context.sent;if(!(info===null)){_context.next=5;break;}throw new Error(\"Failed to find mint account\");case 5:return _context.abrupt(\"return\",tokenAccountFactory(pubKey,info));case 6:case\"end\":return _context.stop();}}},_callee);}));return function getAccountInfo(_x,_x2){return _ref.apply(this,arguments);};}();var getMintInfo=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,pubKey){var info,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return connection.getAccountInfo(pubKey);case 2:info=_context2.sent;if(!(info===null)){_context2.next=5;break;}throw new Error(\"Failed to find mint account\");case 5:data=Buffer.from(info.data);return _context2.abrupt(\"return\",deserializeMint(data));case 7:case\"end\":return _context2.stop();}}},_callee2);}));return function getMintInfo(_x3,_x4){return _ref2.apply(this,arguments);};}();export var MintParser=function MintParser(pubKey,info){var buffer=Buffer.from(info.data);var data=deserializeMint(buffer);var details={pubkey:pubKey,account:_objectSpread({},info),info:data};return details;};export var TokenAccountParser=tokenAccountFactory;export var GenericAccountParser=function GenericAccountParser(pubKey,info){var buffer=Buffer.from(info.data);var details={pubkey:pubKey,account:_objectSpread({},info),info:buffer};return details;};export var keyToAccountParser=new Map();export var cache={query:function(){var _query=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection,pubKey,parser){var id,address,account,query;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(typeof pubKey===\"string\"){id=new PublicKey(pubKey);}else{id=pubKey;}address=id.toBase58();account=genericCache.get(address);if(!account){_context3.next=5;break;}return _context3.abrupt(\"return\",account);case 5:query=pendingCalls.get(address);if(!query){_context3.next=8;break;}return _context3.abrupt(\"return\",query);case 8:query=connection.getAccountInfo(id).then(function(data){if(!data){throw new Error(\"Account not found\");}return cache.add(id,data,parser);});pendingCalls.set(address,query);return _context3.abrupt(\"return\",query);case 11:case\"end\":return _context3.stop();}}},_callee3);}));function query(_x5,_x6,_x7){return _query.apply(this,arguments);}return query;}(),add:function add(id,obj,parser){var address=id.toBase58();var deserialize=parser?parser:keyToAccountParser.get(address);if(!deserialize){throw new Error(\"Deserializer needs to be registered or passed as a parameter\");}cache.registerParser(id,deserialize);pendingCalls.delete(address);var account=deserialize(id,obj);genericCache.set(address,account);return account;},get:function get(pubKey){var key;if(typeof pubKey!==\"string\"){key=pubKey.toBase58();}else{key=pubKey;}return genericCache.get(key);},registerParser:function registerParser(pubkey,parser){keyToAccountParser.set(pubkey.toBase58(),parser);},queryAccount:function(){var _queryAccount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection,pubKey){var id,address,account,query;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(typeof pubKey===\"string\"){id=new PublicKey(pubKey);}else{id=pubKey;}address=id.toBase58();account=accountsCache.get(address);if(!account){_context4.next=5;break;}return _context4.abrupt(\"return\",account);case 5:query=pendingAccountCalls.get(address);if(!query){_context4.next=8;break;}return _context4.abrupt(\"return\",query);case 8:query=getAccountInfo(connection,id).then(function(data){pendingAccountCalls.delete(address);accountsCache.set(address,data);return data;});pendingAccountCalls.set(address,query);return _context4.abrupt(\"return\",query);case 11:case\"end\":return _context4.stop();}}},_callee4);}));function queryAccount(_x8,_x9){return _queryAccount.apply(this,arguments);}return queryAccount;}(),addAccount:function addAccount(pubKey,obj){var account=tokenAccountFactory(pubKey,obj);accountsCache.set(account.pubkey.toBase58(),account);return account;},getAccount:function getAccount(pubKey){var key;if(typeof pubKey!==\"string\"){key=pubKey.toBase58();}else{key=pubKey;}return accountsCache.get(key);},queryMint:function(){var _queryMint=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection,pubKey){var id,address,mint,query;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(typeof pubKey===\"string\"){id=new PublicKey(pubKey);}else{id=pubKey;}address=id.toBase58();mint=mintCache.get(address);if(!mint){_context5.next=5;break;}return _context5.abrupt(\"return\",mint);case 5:query=pendingMintCalls.get(address);if(!query){_context5.next=8;break;}return _context5.abrupt(\"return\",query);case 8:query=getMintInfo(connection,id).then(function(data){pendingAccountCalls.delete(address);mintCache.set(address,data);return data;});pendingAccountCalls.set(address,query);return _context5.abrupt(\"return\",query);case 11:case\"end\":return _context5.stop();}}},_callee5);}));function queryMint(_x10,_x11){return _queryMint.apply(this,arguments);}return queryMint;}(),getMint:function getMint(pubKey){var key;if(typeof pubKey!==\"string\"){key=pubKey.toBase58();}else{key=pubKey;}return mintCache.get(key);},addMint:function addMint(pubKey,obj){var mint=deserializeMint(obj.data);mintCache.set(pubKey.toBase58(),mint);return mint;}};export var getCachedAccount=function getCachedAccount(predicate){var _iterator=_createForOfIteratorHelper(accountsCache.values()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _account=_step.value;if(predicate(_account)){return _account;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}};function tokenAccountFactory(pubKey,info){var buffer=Buffer.from(info.data);var data=deserializeAccount(buffer);var details={pubkey:pubKey,account:_objectSpread({},info),info:data};return details;}function wrapNativeAccount(pubkey,account){if(!account){return undefined;}return{pubkey:pubkey,account:account,info:{mint:WRAPPED_SOL_MINT,owner:pubkey,amount:new u64(account.lamports),delegate:null,delegatedAmount:new u64(0),isInitialized:true,isFrozen:false,isNative:true,rentExemptReserve:null,closeAuthority:null}};}var UseNativeAccount=function UseNativeAccount(){var connection=useConnection();var _useWallet=useWallet(),wallet=_useWallet.wallet;var _useState=useState(),_useState2=_slicedToArray(_useState,2),nativeAccount=_useState2[0],setNativeAccount=_useState2[1];useEffect(function(){if(!connection||!(wallet===null||wallet===void 0?void 0:wallet.publicKey)){return;}connection.getAccountInfo(wallet.publicKey).then(function(acc){if(acc){setNativeAccount(acc);}});connection.onAccountChange(wallet.publicKey,function(acc){if(acc){setNativeAccount(acc);}});},[setNativeAccount,wallet,wallet.publicKey,connection]);return{nativeAccount:nativeAccount};};var PRECACHED_OWNERS=new Set();var precacheUserTokenAccounts=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connection,owner){var accounts;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(owner){_context6.next=2;break;}return _context6.abrupt(\"return\");case 2:// used for filtering account updates over websocket\nPRECACHED_OWNERS.add(owner.toBase58());// user accounts are update via ws subscription\n_context6.next=5;return connection.getTokenAccountsByOwner(owner,{programId:programIds().token});case 5:accounts=_context6.sent;accounts.value.map(function(info){var data=deserializeAccount(info.account.data);// need to query for mint to get decimals\n// TODO: move to web3.js for decoding on the client side... maybe with callback\nvar details={pubkey:info.pubkey,account:_objectSpread({},info.account),info:data};return details;}).forEach(function(acc){accountsCache.set(acc.pubkey.toBase58(),acc);});case 7:case\"end\":return _context6.stop();}}},_callee6);}));return function precacheUserTokenAccounts(_x12,_x13){return _ref3.apply(this,arguments);};}();export function AccountsProvider(_ref4){var _ref4$children=_ref4.children,children=_ref4$children===void 0?null:_ref4$children;var connection=useConnection();var _useWallet2=useWallet(),wallet=_useWallet2.wallet,connected=_useWallet2.connected;var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),tokenAccounts=_useState4[0],setTokenAccounts=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),userAccounts=_useState6[0],setUserAccounts=_useState6[1];var _UseNativeAccount=UseNativeAccount(),nativeAccount=_UseNativeAccount.nativeAccount;var _usePools=usePools(),pools=_usePools.pools;var selectUserAccounts=useCallback(function(){return _toConsumableArray(accountsCache.values()).filter(function(a){return a.info.owner.toBase58()===wallet.publicKey.toBase58();});},[wallet]);useEffect(function(){setUserAccounts([wrapNativeAccount(wallet.publicKey,nativeAccount)].concat(_toConsumableArray(tokenAccounts)).filter(function(a){return a!==undefined;}));},[nativeAccount,wallet,tokenAccounts]);useEffect(function(){if(!connection||!wallet||!wallet.publicKey){setTokenAccounts([]);}else{// cache host accounts to avoid query during swap\nprecacheUserTokenAccounts(connection,SWAP_HOST_FEE_ADDRESS);precacheUserTokenAccounts(connection,wallet.publicKey).then(function(){setTokenAccounts(selectUserAccounts());});// This can return different types of accounts: token-account, mint, multisig\n// TODO: web3.js expose ability to filter. discuss filter syntax\nvar tokenSubID=connection.onProgramAccountChange(programIds().token,function(info){// TODO: fix type in web3.js\nvar id=info.accountId;// TODO: do we need a better way to identify layout (maybe a enum identifing type?)\nif(info.accountInfo.data.length===AccountLayout.span){var _data=deserializeAccount(info.accountInfo.data);// TODO: move to web3.js for decoding on the client side... maybe with callback\nvar details={pubkey:new PublicKey(info.accountId),account:_objectSpread({},info.accountInfo),info:_data};if(PRECACHED_OWNERS.has(details.info.owner.toBase58())||accountsCache.has(id)){accountsCache.set(id,details);setTokenAccounts(selectUserAccounts());accountEmitter.raiseAccountUpdated(id);}}else if(info.accountInfo.data.length===MintLayout.span){if(mintCache.has(id)){var _data2=Buffer.from(info.accountInfo.data);var mint=deserializeMint(_data2);mintCache.set(id,mint);accountEmitter.raiseAccountUpdated(id);}accountEmitter.raiseAccountUpdated(id);}if(genericCache.has(id)){cache.add(new PublicKey(id),info.accountInfo);}},\"singleGossip\");return function(){connection.removeProgramAccountChangeListener(tokenSubID);};}},[connection,connected,wallet===null||wallet===void 0?void 0:wallet.publicKey]);return/*#__PURE__*/React.createElement(AccountsContext.Provider,{value:{userAccounts:userAccounts,pools:pools,nativeAccount:nativeAccount}},children);}export function useNativeAccount(){var context=useContext(AccountsContext);return{account:context.nativeAccount};}export var getMultipleAccounts=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(connection,keys,commitment){var result,array;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return Promise.all(chunks(keys,99).map(function(chunk){return getMultipleAccountsCore(connection,chunk,commitment);}));case 2:result=_context7.sent;array=result.map(function(a){return a.array.map(function(acc){var data=acc.data,rest=_objectWithoutProperties(acc,[\"data\"]);var obj=_objectSpread(_objectSpread({},rest),{},{data:Buffer.from(data[0],\"base64\")});return obj;});}).flat();return _context7.abrupt(\"return\",{keys:keys,array:array});case 5:case\"end\":return _context7.stop();}}},_callee7);}));return function getMultipleAccounts(_x14,_x15,_x16){return _ref5.apply(this,arguments);};}();var getMultipleAccountsCore=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(connection,keys,commitment){var args,unsafeRes,array;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:args=connection._buildArgs([keys],commitment,\"base64\");_context8.next=3;return connection._rpcRequest(\"getMultipleAccounts\",args);case 3:unsafeRes=_context8.sent;if(!unsafeRes.error){_context8.next=6;break;}throw new Error(\"failed to get info about account \"+unsafeRes.error.message);case 6:if(!unsafeRes.result.value){_context8.next=9;break;}array=unsafeRes.result.value;return _context8.abrupt(\"return\",{keys:keys,array:array});case 9:throw new Error();case 10:case\"end\":return _context8.stop();}}},_callee8);}));return function getMultipleAccountsCore(_x17,_x18,_x19){return _ref6.apply(this,arguments);};}();export function useMint(id){var connection=useConnection();var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),mint=_useState8[0],setMint=_useState8[1];useEffect(function(){if(!id){return;}cache.queryMint(connection,id).then(setMint).catch(function(err){return notify({message:err.message,type:\"error\"});});var onAccountEvent=function onAccountEvent(e){var event=e;if(event.id===id){cache.queryMint(connection,id).then(setMint);}};accountEmitter.addEventListener(AccountUpdateEvent.type,onAccountEvent);return function(){accountEmitter.removeEventListener(AccountUpdateEvent.type,onAccountEvent);};},[connection,id]);return mint;}export function useUserAccounts(){var context=useContext(AccountsContext);return{userAccounts:context.userAccounts};}export function useAccount(pubKey){var connection=useConnection();var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),account=_useState10[0],setAccount=_useState10[1];var key=pubKey===null||pubKey===void 0?void 0:pubKey.toBase58();useEffect(function(){var query=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(){var acc;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.prev=0;if(key){_context9.next=3;break;}return _context9.abrupt(\"return\");case 3:_context9.next=5;return cache.queryAccount(connection,key).catch(function(err){return notify({message:err.message,type:\"error\"});});case 5:acc=_context9.sent;if(acc){setAccount(acc);}_context9.next=12;break;case 9:_context9.prev=9;_context9.t0=_context9[\"catch\"](0);console.error(_context9.t0);case 12:case\"end\":return _context9.stop();}}},_callee9,null,[[0,9]]);}));return function query(){return _ref7.apply(this,arguments);};}();query();var onAccountEvent=function onAccountEvent(e){var event=e;if(event.id===key){query();}};accountEmitter.addEventListener(AccountUpdateEvent.type,onAccountEvent);return function(){accountEmitter.removeEventListener(AccountUpdateEvent.type,onAccountEvent);};},[connection,key]);return account;}export function useCachedPool(){var context=useContext(AccountsContext);return{pools:context.pools};}export var useSelectedAccount=function useSelectedAccount(account){var _useUserAccounts=useUserAccounts(),userAccounts=_useUserAccounts.userAccounts;var index=userAccounts.findIndex(function(acc){return acc.pubkey.toBase58()===account;});if(index!==-1){return userAccounts[index];}return;};export var useAccountByMint=function useAccountByMint(mint){var _useUserAccounts2=useUserAccounts(),userAccounts=_useUserAccounts2.userAccounts;var index=userAccounts.findIndex(function(acc){return acc.info.mint.toBase58()===mint;});if(index!==-1){return userAccounts[index];}return;};// TODO: expose in spl package\nvar deserializeAccount=function deserializeAccount(data){var accountInfo=AccountLayout.decode(data);accountInfo.mint=new PublicKey(accountInfo.mint);accountInfo.owner=new PublicKey(accountInfo.owner);accountInfo.amount=u64.fromBuffer(accountInfo.amount);if(accountInfo.delegateOption===0){accountInfo.delegate=null;accountInfo.delegatedAmount=new u64(0);}else{accountInfo.delegate=new PublicKey(accountInfo.delegate);accountInfo.delegatedAmount=u64.fromBuffer(accountInfo.delegatedAmount);}accountInfo.isInitialized=accountInfo.state!==0;accountInfo.isFrozen=accountInfo.state===2;if(accountInfo.isNativeOption===1){accountInfo.rentExemptReserve=u64.fromBuffer(accountInfo.isNative);accountInfo.isNative=true;}else{accountInfo.rentExemptReserve=null;accountInfo.isNative=false;}if(accountInfo.closeAuthorityOption===0){accountInfo.closeAuthority=null;}else{accountInfo.closeAuthority=new PublicKey(accountInfo.closeAuthority);}return accountInfo;};// TODO: expose in spl package\nvar deserializeMint=function deserializeMint(data){if(data.length!==MintLayout.span){throw new Error(\"Not a valid Mint\");}var mintInfo=MintLayout.decode(data);if(mintInfo.mintAuthorityOption===0){mintInfo.mintAuthority=null;}else{mintInfo.mintAuthority=new PublicKey(mintInfo.mintAuthority);}mintInfo.supply=u64.fromBuffer(mintInfo.supply);mintInfo.isInitialized=mintInfo.isInitialized!==0;if(mintInfo.freezeAuthorityOption===0){mintInfo.freezeAuthority=null;}else{mintInfo.freezeAuthority=new PublicKey(mintInfo.freezeAuthority);}return mintInfo;};","map":{"version":3,"sources":["/home/fs/srmswap/srmswap/srmswap.github.io/src/utils/accounts.tsx"],"names":["React","useCallback","useContext","useEffect","useState","useConnection","useWallet","PublicKey","programIds","SWAP_HOST_FEE_ADDRESS","WRAPPED_SOL_MINT","AccountLayout","u64","MintLayout","usePools","notify","chunks","AccountsContext","createContext","AccountUpdateEvent","id","type","Event","EventEmitter","dispatchEvent","EventTarget","accountEmitter","pendingMintCalls","Map","mintCache","pendingAccountCalls","accountsCache","pendingCalls","genericCache","getAccountInfo","connection","pubKey","info","Error","tokenAccountFactory","getMintInfo","data","Buffer","from","deserializeMint","MintParser","buffer","details","pubkey","account","TokenAccountParser","GenericAccountParser","keyToAccountParser","cache","query","parser","address","toBase58","get","then","add","set","obj","deserialize","registerParser","delete","key","queryAccount","addAccount","getAccount","queryMint","mint","getMint","addMint","getCachedAccount","predicate","values","deserializeAccount","wrapNativeAccount","undefined","owner","amount","lamports","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","UseNativeAccount","wallet","nativeAccount","setNativeAccount","publicKey","acc","onAccountChange","PRECACHED_OWNERS","Set","precacheUserTokenAccounts","getTokenAccountsByOwner","programId","token","accounts","value","map","forEach","AccountsProvider","children","connected","tokenAccounts","setTokenAccounts","userAccounts","setUserAccounts","pools","selectUserAccounts","filter","a","tokenSubID","onProgramAccountChange","accountId","accountInfo","length","span","has","raiseAccountUpdated","removeProgramAccountChangeListener","useNativeAccount","context","getMultipleAccounts","keys","commitment","Promise","all","chunk","getMultipleAccountsCore","result","array","rest","flat","args","_buildArgs","_rpcRequest","unsafeRes","error","message","useMint","setMint","catch","err","onAccountEvent","e","event","addEventListener","removeEventListener","useUserAccounts","useAccount","setAccount","console","useCachedPool","useSelectedAccount","index","findIndex","useAccountByMint","decode","fromBuffer","delegateOption","state","isNativeOption","closeAuthorityOption","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useConnection } from \"./connection\";\nimport { useWallet } from \"./wallet\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\nimport { programIds, SWAP_HOST_FEE_ADDRESS, WRAPPED_SOL_MINT } from \"./ids\";\nimport { AccountLayout, u64, MintInfo, MintLayout } from \"@solana/spl-token\";\nimport { usePools } from \"./pools\";\nimport { TokenAccount, PoolInfo } from \"./../models\";\nimport { notify } from \"./notifications\";\nimport { chunks } from \"./utils\";\n\nconst AccountsContext = React.createContext<any>(null);\n\nclass AccountUpdateEvent extends Event {\n  static type = \"AccountUpdate\";\n  id: string;\n  constructor(id: string) {\n    super(AccountUpdateEvent.type);\n    this.id = id;\n  }\n}\n\nclass EventEmitter extends EventTarget {\n  raiseAccountUpdated(id: string) {\n    this.dispatchEvent(new AccountUpdateEvent(id));\n  }\n}\n\nconst accountEmitter = new EventEmitter();\n\nconst pendingMintCalls = new Map<string, Promise<MintInfo>>();\nconst mintCache = new Map<string, MintInfo>();\nconst pendingAccountCalls = new Map<string, Promise<TokenAccount>>();\nconst accountsCache = new Map<string, TokenAccount>();\n\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\nconst genericCache = new Map<string, ParsedAccountBase>();\n\nconst getAccountInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error(\"Failed to find mint account\");\n  }\n\n  return tokenAccountFactory(pubKey, info);\n};\n\nconst getMintInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error(\"Failed to find mint account\");\n  }\n\n  const data = Buffer.from(info.data);\n\n  return deserializeMint(data);\n};\n\nexport interface ParsedAccountBase {\n  pubkey: PublicKey;\n  account: AccountInfo<Buffer>;\n  info: any; // TODO: change to unkown\n}\n\nexport interface ParsedAccount<T> extends ParsedAccountBase {\n  info: T;\n}\n\nexport type AccountParser = (\n  pubkey: PublicKey,\n  data: AccountInfo<Buffer>\n) => ParsedAccountBase;\nexport const MintParser = (pubKey: PublicKey, info: AccountInfo<Buffer>) => {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeMint(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const TokenAccountParser = tokenAccountFactory;\n\nexport const GenericAccountParser = (\n  pubKey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  const buffer = Buffer.from(info.data);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: buffer,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const keyToAccountParser = new Map<string, AccountParser>();\n\nexport const cache = {\n  query: async (\n    connection: Connection,\n    pubKey: string | PublicKey,\n    parser?: AccountParser\n  ) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = genericCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = connection.getAccountInfo(id).then((data) => {\n      if (!data) {\n        throw new Error(\"Account not found\");\n      }\n\n      return cache.add(id, data, parser);\n    }) as Promise<TokenAccount>;\n    pendingCalls.set(address, query as any);\n\n    return query;\n  },\n  add: (id: PublicKey, obj: AccountInfo<Buffer>, parser?: AccountParser) => {\n    const address = id.toBase58();\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\n    if (!deserialize) {\n      throw new Error(\n        \"Deserializer needs to be registered or passed as a parameter\"\n      );\n    }\n\n    cache.registerParser(id, deserialize);\n    pendingCalls.delete(address);\n    const account = deserialize(id, obj);\n    genericCache.set(address, account);\n    return account;\n  },\n  get: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return genericCache.get(key);\n  },\n  registerParser: (pubkey: PublicKey, parser: AccountParser) => {\n    keyToAccountParser.set(pubkey.toBase58(), parser);\n  },\n\n  queryAccount: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = accountsCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingAccountCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getAccountInfo(connection, id).then((data) => {\n      pendingAccountCalls.delete(address);\n      accountsCache.set(address, data);\n      return data;\n    }) as Promise<TokenAccount>;\n    pendingAccountCalls.set(address, query as any);\n\n    return query;\n  },\n  addAccount: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const account = tokenAccountFactory(pubKey, obj);\n    accountsCache.set(account.pubkey.toBase58(), account);\n    return account;\n  },\n  getAccount: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return accountsCache.get(key);\n  },\n  queryMint: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n    let mint = mintCache.get(address);\n    if (mint) {\n      return mint;\n    }\n\n    let query = pendingMintCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getMintInfo(connection, id).then((data) => {\n      pendingAccountCalls.delete(address);\n      mintCache.set(address, data);\n      return data;\n    }) as Promise<MintInfo>;\n    pendingAccountCalls.set(address, query as any);\n\n    return query;\n  },\n  getMint: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return mintCache.get(key);\n  },\n  addMint: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const mint = deserializeMint(obj.data);\n    mintCache.set(pubKey.toBase58(), mint);\n    return mint;\n  },\n};\n\nexport const getCachedAccount = (\n  predicate: (account: TokenAccount) => boolean\n) => {\n  for (const account of accountsCache.values()) {\n    if (predicate(account)) {\n      return account as TokenAccount;\n    }\n  }\n};\n\nfunction tokenAccountFactory(pubKey: PublicKey, info: AccountInfo<Buffer>) {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeAccount(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as TokenAccount;\n\n  return details;\n}\n\nfunction wrapNativeAccount(\n  pubkey: PublicKey,\n  account?: AccountInfo<Buffer>\n): TokenAccount | undefined {\n  if (!account) {\n    return undefined;\n  }\n\n  return {\n    pubkey: pubkey,\n    account,\n    info: {\n      mint: WRAPPED_SOL_MINT,\n      owner: pubkey,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null,\n    },\n  };\n}\n\nconst UseNativeAccount = () => {\n  const connection = useConnection();\n  const { wallet } = useWallet();\n\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\n  useEffect(() => {\n    if (!connection || !wallet?.publicKey) {\n      return;\n    }\n\n    connection.getAccountInfo(wallet.publicKey).then((acc) => {\n      if (acc) {\n        setNativeAccount(acc);\n      }\n    });\n    connection.onAccountChange(wallet.publicKey, (acc) => {\n      if (acc) {\n        setNativeAccount(acc);\n      }\n    });\n  }, [setNativeAccount, wallet, wallet.publicKey, connection]);\n\n  return { nativeAccount };\n};\n\nconst PRECACHED_OWNERS = new Set<string>();\nconst precacheUserTokenAccounts = async (\n  connection: Connection,\n  owner?: PublicKey\n) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are update via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token,\n  });\n  accounts.value\n    .map((info) => {\n      const data = deserializeAccount(info.account.data);\n      // need to query for mint to get decimals\n\n      // TODO: move to web3.js for decoding on the client side... maybe with callback\n      const details = {\n        pubkey: info.pubkey,\n        account: {\n          ...info.account,\n        },\n        info: data,\n      } as TokenAccount;\n\n      return details;\n    })\n    .forEach((acc) => {\n      accountsCache.set(acc.pubkey.toBase58(), acc);\n    });\n};\n\nexport function AccountsProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\n  const { nativeAccount } = UseNativeAccount();\n  const { pools } = usePools();\n\n  const selectUserAccounts = useCallback(() => {\n    return [...accountsCache.values()].filter(\n      (a) => a.info.owner.toBase58() === wallet.publicKey.toBase58()\n    );\n  }, [wallet]);\n\n  useEffect(() => {\n    setUserAccounts(\n      [\n        wrapNativeAccount(wallet.publicKey, nativeAccount),\n        ...tokenAccounts,\n      ].filter((a) => a !== undefined) as TokenAccount[]\n    );\n  }, [nativeAccount, wallet, tokenAccounts]);\n\n  useEffect(() => {\n    if (!connection || !wallet || !wallet.publicKey) {\n      setTokenAccounts([]);\n    } else {\n      // cache host accounts to avoid query during swap\n      precacheUserTokenAccounts(connection, SWAP_HOST_FEE_ADDRESS);\n\n      precacheUserTokenAccounts(connection, wallet.publicKey).then(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter. discuss filter syntax\n      const tokenSubID = connection.onProgramAccountChange(\n        programIds().token,\n        (info) => {\n          // TODO: fix type in web3.js\n          const id = (info.accountId as unknown) as string;\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\n          if (info.accountInfo.data.length === AccountLayout.span) {\n            const data = deserializeAccount(info.accountInfo.data);\n            // TODO: move to web3.js for decoding on the client side... maybe with callback\n            const details = {\n              pubkey: new PublicKey((info.accountId as unknown) as string),\n              account: {\n                ...info.accountInfo,\n              },\n              info: data,\n            } as TokenAccount;\n\n            if (\n              PRECACHED_OWNERS.has(details.info.owner.toBase58()) ||\n              accountsCache.has(id)\n            ) {\n              accountsCache.set(id, details);\n              setTokenAccounts(selectUserAccounts());\n              accountEmitter.raiseAccountUpdated(id);\n            }\n          } else if (info.accountInfo.data.length === MintLayout.span) {\n            if (mintCache.has(id)) {\n              const data = Buffer.from(info.accountInfo.data);\n              const mint = deserializeMint(data);\n              mintCache.set(id, mint);\n              accountEmitter.raiseAccountUpdated(id);\n            }\n\n            accountEmitter.raiseAccountUpdated(id);\n          }\n\n          if (genericCache.has(id)) {\n            cache.add(new PublicKey(id), info.accountInfo);\n          }\n        },\n        \"singleGossip\"\n      );\n\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n      };\n    }\n  }, [connection, connected, wallet?.publicKey]);\n\n  return (\n    <AccountsContext.Provider\n      value={{\n        userAccounts,\n        pools,\n        nativeAccount,\n      }}\n    >\n      {children}\n    </AccountsContext.Provider>\n  );\n}\n\nexport function useNativeAccount() {\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount as AccountInfo<Buffer>,\n  };\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map((chunk) =>\n      getMultipleAccountsCore(connection, chunk, commitment)\n    )\n  );\n\n  const array = result\n    .map(\n      (a) =>\n        a.array.map((acc) => {\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], \"base64\"),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[]\n    )\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string\n) => {\n  const args = connection._buildArgs([keys], commitment, \"base64\");\n\n  const unsafeRes = await connection._rpcRequest(\"getMultipleAccounts\", args);\n  if (unsafeRes.error) {\n    throw new Error(\n      \"failed to get info about account \" + unsafeRes.error.message\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function useMint(id?: string) {\n  const connection = useConnection();\n  const [mint, setMint] = useState<MintInfo>();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    cache\n      .queryMint(connection, id)\n      .then(setMint)\n      .catch((err) =>\n        notify({\n          message: err.message,\n          type: \"error\",\n        })\n      );\n    const onAccountEvent = (e: Event) => {\n      const event = e as AccountUpdateEvent;\n      if (event.id === id) {\n        cache.queryMint(connection, id).then(setMint);\n      }\n    };\n\n    accountEmitter.addEventListener(AccountUpdateEvent.type, onAccountEvent);\n    return () => {\n      accountEmitter.removeEventListener(\n        AccountUpdateEvent.type,\n        onAccountEvent\n      );\n    };\n  }, [connection, id]);\n\n  return mint;\n}\n\nexport function useUserAccounts() {\n  const context = useContext(AccountsContext);\n  return {\n    userAccounts: context.userAccounts as TokenAccount[],\n  };\n}\n\nexport function useAccount(pubKey?: PublicKey) {\n  const connection = useConnection();\n  const [account, setAccount] = useState<TokenAccount>();\n\n  const key = pubKey?.toBase58();\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n\n        const acc = await cache.queryAccount(connection, key).catch((err) =>\n          notify({\n            message: err.message,\n            type: \"error\",\n          })\n        );\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    query();\n\n    const onAccountEvent = (e: Event) => {\n      const event = e as AccountUpdateEvent;\n      if (event.id === key) {\n        query();\n      }\n    };\n\n    accountEmitter.addEventListener(AccountUpdateEvent.type, onAccountEvent);\n    return () => {\n      accountEmitter.removeEventListener(\n        AccountUpdateEvent.type,\n        onAccountEvent\n      );\n    };\n  }, [connection, key]);\n\n  return account;\n}\n\nexport function useCachedPool() {\n  const context = useContext(AccountsContext);\n  return {\n    pools: context.pools as PoolInfo[],\n  };\n}\n\nexport const useSelectedAccount = (account: string) => {\n  const { userAccounts } = useUserAccounts();\n  const index = userAccounts.findIndex(\n    (acc) => acc.pubkey.toBase58() === account\n  );\n\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n\n  return;\n};\n\nexport const useAccountByMint = (mint: string) => {\n  const { userAccounts } = useUserAccounts();\n  const index = userAccounts.findIndex(\n    (acc) => acc.info.mint.toBase58() === mint\n  );\n\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n\n  return;\n};\n\n// TODO: expose in spl package\nconst deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\n// TODO: expose in spl package\nconst deserializeMint = (data: Buffer) => {\n  if (data.length !== MintLayout.span) {\n    throw new Error(\"Not a valid Mint\");\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as MintInfo;\n};\n"]},"metadata":{},"sourceType":"module"}