{"ast":null,"code":"import _regeneratorRuntime from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/fs/srmswap/srmswap/srmswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{addLiquidity,usePoolForBasket}from\"../../utils/pools\";import{Button,Dropdown,Popover}from\"antd\";import{useWallet}from\"../../utils/wallet\";import{useConnection,useConnectionConfig,useSlippageConfig}from\"../../utils/connection\";import{Spin}from\"antd\";import{LoadingOutlined}from\"@ant-design/icons\";import{notify}from\"../../utils/notifications\";import{SupplyOverview}from\"./supplyOverview\";import{CurrencyInput}from\"../currencyInput\";import{DEFAULT_DENOMINATOR,PoolConfigCard}from\"./config\";import\"./add.less\";import{SWAP_PROGRAM_OWNER_FEE_ADDRESS}from\"../../utils/ids\";import{useCurrencyPairState}from\"../../utils/currencyPair\";import{CREATE_POOL_LABEL,ADD_LIQUIDITY_LABEL,generateActionLabel}from\"../labels\";var antIcon=/*#__PURE__*/React.createElement(LoadingOutlined,{style:{fontSize:24},spin:true});export var AddToLiquidity=function AddToLiquidity(){var _useWallet=useWallet(),wallet=_useWallet.wallet,connected=_useWallet.connected;var connection=useConnection();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),pendingTx=_useState2[0],setPendingTx=_useState2[1];var _useCurrencyPairState=useCurrencyPairState(),A=_useCurrencyPairState.A,B=_useCurrencyPairState.B,setLastTypedAccount=_useCurrencyPairState.setLastTypedAccount;var pool=usePoolForBasket([A===null||A===void 0?void 0:A.mintAddress,B===null||B===void 0?void 0:B.mintAddress]);var _useSlippageConfig=useSlippageConfig(),slippage=_useSlippageConfig.slippage;var _useConnectionConfig=useConnectionConfig(),env=_useConnectionConfig.env;var _useState3=useState({curveType:0,tradeFeeNumerator:25,tradeFeeDenominator:DEFAULT_DENOMINATOR,ownerTradeFeeNumerator:5,ownerTradeFeeDenominator:DEFAULT_DENOMINATOR,ownerWithdrawFeeNumerator:0,ownerWithdrawFeeDenominator:DEFAULT_DENOMINATOR}),_useState4=_slicedToArray(_useState3,2),options=_useState4[0],setOptions=_useState4[1];var executeAction=!connected?wallet.connect:/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var components;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(A.account&&B.account&&A.mint&&B.mint){setPendingTx(true);components=[{account:A.account,mintAddress:A.mintAddress,amount:A.convertAmount()},{account:B.account,mintAddress:B.mintAddress,amount:B.convertAmount()}];addLiquidity(connection,wallet,components,slippage,pool,options).then(function(){setPendingTx(false);}).catch(function(e){console.log(\"Transaction failed\",e);notify({description:\"Please try again and approve transactions from your wallet\",message:\"Adding liquidity cancelled.\",type:\"error\"});setPendingTx(false);});}case 1:case\"end\":return _context.stop();}}},_callee);}));var hasSufficientBalance=A.sufficientBalance()&&B.sufficientBalance();var createPoolButton=SWAP_PROGRAM_OWNER_FEE_ADDRESS?/*#__PURE__*/React.createElement(Button,{className:\"add-button\",onClick:executeAction,disabled:connected&&(pendingTx||!A.account||!B.account||A.account===B.account),type:\"primary\",size:\"large\"},generateActionLabel(CREATE_POOL_LABEL,connected,env,A,B),pendingTx&&/*#__PURE__*/React.createElement(Spin,{indicator:antIcon,className:\"add-spinner\"})):/*#__PURE__*/React.createElement(Dropdown.Button,{className:\"add-button\",onClick:executeAction,disabled:connected&&(pendingTx||!A.account||!B.account||A.account===B.account),type:\"primary\",size:\"large\",overlay:/*#__PURE__*/React.createElement(PoolConfigCard,{options:options,setOptions:setOptions})},generateActionLabel(CREATE_POOL_LABEL,connected,env,A,B),pendingTx&&/*#__PURE__*/React.createElement(Spin,{indicator:antIcon,className:\"add-spinner\"}));return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Popover,{trigger:\"hover\",content:/*#__PURE__*/React.createElement(\"div\",{style:{width:300}},\"Liquidity providers earn a fixed percentage fee on all trades proportional to their share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\")},/*#__PURE__*/React.createElement(Button,{type:\"text\"},\"Read more about providing liquidity.\")),/*#__PURE__*/React.createElement(CurrencyInput,{title:\"Input\",onInputChange:function onInputChange(val){if(A.amount!==val){setLastTypedAccount(A.mintAddress);}A.setAmount(val);},amount:A.amount,mint:A.mintAddress,onMintChange:function onMintChange(item){A.setMint(item);}}),/*#__PURE__*/React.createElement(\"div\",null,\"+\"),/*#__PURE__*/React.createElement(CurrencyInput,{title:\"Input\",onInputChange:function onInputChange(val){if(B.amount!==val){setLastTypedAccount(B.mintAddress);}B.setAmount(val);},amount:B.amount,mint:B.mintAddress,onMintChange:function onMintChange(item){B.setMint(item);}}),/*#__PURE__*/React.createElement(SupplyOverview,{mintAddress:[A.mintAddress,B.mintAddress],pool:pool}),pool&&/*#__PURE__*/React.createElement(Button,{className:\"add-button\",type:\"primary\",size:\"large\",onClick:executeAction,disabled:connected&&(pendingTx||!A.account||!B.account||A.account===B.account||!hasSufficientBalance)},generateActionLabel(ADD_LIQUIDITY_LABEL,connected,env,A,B),pendingTx&&/*#__PURE__*/React.createElement(Spin,{indicator:antIcon,className:\"add-spinner\"})),!pool&&createPoolButton);};","map":{"version":3,"sources":["/home/fs/srmswap/srmswap/srmswap.github.io/src/components/pool/add.tsx"],"names":["React","useState","addLiquidity","usePoolForBasket","Button","Dropdown","Popover","useWallet","useConnection","useConnectionConfig","useSlippageConfig","Spin","LoadingOutlined","notify","SupplyOverview","CurrencyInput","DEFAULT_DENOMINATOR","PoolConfigCard","SWAP_PROGRAM_OWNER_FEE_ADDRESS","useCurrencyPairState","CREATE_POOL_LABEL","ADD_LIQUIDITY_LABEL","generateActionLabel","antIcon","fontSize","AddToLiquidity","wallet","connected","connection","pendingTx","setPendingTx","A","B","setLastTypedAccount","pool","mintAddress","slippage","env","curveType","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","options","setOptions","executeAction","connect","account","mint","components","amount","convertAmount","then","catch","e","console","log","description","message","type","hasSufficientBalance","sufficientBalance","createPoolButton","width","val","setAmount","item","setMint"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { addLiquidity, usePoolForBasket } from \"../../utils/pools\";\nimport { Button, Dropdown, Popover } from \"antd\";\nimport { useWallet } from \"../../utils/wallet\";\nimport {\n  useConnection,\n  useConnectionConfig,\n  useSlippageConfig,\n} from \"../../utils/connection\";\nimport { Spin } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { notify } from \"../../utils/notifications\";\nimport { SupplyOverview } from \"./supplyOverview\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport { DEFAULT_DENOMINATOR, PoolConfigCard } from \"./config\";\nimport \"./add.less\";\nimport { PoolConfig } from \"../../models\";\nimport { SWAP_PROGRAM_OWNER_FEE_ADDRESS } from \"../../utils/ids\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport {\n  CREATE_POOL_LABEL,\n  ADD_LIQUIDITY_LABEL,\n  generateActionLabel,\n} from \"../labels\";\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nexport const AddToLiquidity = () => {\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const { A, B, setLastTypedAccount } = useCurrencyPairState();\n  const pool = usePoolForBasket([A?.mintAddress, B?.mintAddress]);\n  const { slippage } = useSlippageConfig();\n  const { env } = useConnectionConfig();\n  const [options, setOptions] = useState<PoolConfig>({\n    curveType: 0,\n    tradeFeeNumerator: 25,\n    tradeFeeDenominator: DEFAULT_DENOMINATOR,\n    ownerTradeFeeNumerator: 5,\n    ownerTradeFeeDenominator: DEFAULT_DENOMINATOR,\n    ownerWithdrawFeeNumerator: 0,\n    ownerWithdrawFeeDenominator: DEFAULT_DENOMINATOR,\n  });\n\n  const executeAction = !connected\n    ? wallet.connect\n    : async () => {\n        if (A.account && B.account && A.mint && B.mint) {\n          setPendingTx(true);\n          const components = [\n            {\n              account: A.account,\n              mintAddress: A.mintAddress,\n              amount: A.convertAmount(),\n            },\n            {\n              account: B.account,\n              mintAddress: B.mintAddress,\n              amount: B.convertAmount(),\n            },\n          ];\n\n          addLiquidity(connection, wallet, components, slippage, pool, options)\n            .then(() => {\n              setPendingTx(false);\n            })\n            .catch((e) => {\n              console.log(\"Transaction failed\", e);\n              notify({\n                description:\n                  \"Please try again and approve transactions from your wallet\",\n                message: \"Adding liquidity cancelled.\",\n                type: \"error\",\n              });\n              setPendingTx(false);\n            });\n        }\n      };\n\n  const hasSufficientBalance = A.sufficientBalance() && B.sufficientBalance();\n\n  const createPoolButton = SWAP_PROGRAM_OWNER_FEE_ADDRESS ? (\n    <Button\n      className=\"add-button\"\n      onClick={executeAction}\n      disabled={\n        connected &&\n        (pendingTx || !A.account || !B.account || A.account === B.account)\n      }\n      type=\"primary\"\n      size=\"large\"\n    >\n      {generateActionLabel(CREATE_POOL_LABEL, connected, env, A, B)}\n      {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n    </Button>\n  ) : (\n    <Dropdown.Button\n      className=\"add-button\"\n      onClick={executeAction}\n      disabled={\n        connected &&\n        (pendingTx || !A.account || !B.account || A.account === B.account)\n      }\n      type=\"primary\"\n      size=\"large\"\n      overlay={<PoolConfigCard options={options} setOptions={setOptions} />}\n    >\n      {generateActionLabel(CREATE_POOL_LABEL, connected, env, A, B)}\n      {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n    </Dropdown.Button>\n  );\n\n  return (\n    <div>\n      <Popover\n        trigger=\"hover\"\n        content={\n          <div style={{ width: 300 }}>\n            Liquidity providers earn a fixed percentage fee on all trades\n            proportional to their share of the pool. Fees are added to the pool,\n            accrue in real time and can be claimed by withdrawing your\n            liquidity.\n          </div>\n        }\n      >\n        <Button type=\"text\">Read more about providing liquidity.</Button>\n      </Popover>\n\n      <CurrencyInput\n        title=\"Input\"\n        onInputChange={(val: any) => {\n          if (A.amount !== val) {\n            setLastTypedAccount(A.mintAddress);\n          }\n          A.setAmount(val);\n        }}\n        amount={A.amount}\n        mint={A.mintAddress}\n        onMintChange={(item) => {\n          A.setMint(item);\n        }}\n      />\n      <div>+</div>\n      <CurrencyInput\n        title=\"Input\"\n        onInputChange={(val: any) => {\n          if (B.amount !== val) {\n            setLastTypedAccount(B.mintAddress);\n          }\n\n          B.setAmount(val);\n        }}\n        amount={B.amount}\n        mint={B.mintAddress}\n        onMintChange={(item) => {\n          B.setMint(item);\n        }}\n      />\n      <SupplyOverview\n        mintAddress={[A.mintAddress, B.mintAddress]}\n        pool={pool}\n      />\n      {pool && (\n        <Button\n          className=\"add-button\"\n          type=\"primary\"\n          size=\"large\"\n          onClick={executeAction}\n          disabled={\n            connected &&\n            (pendingTx ||\n              !A.account ||\n              !B.account ||\n              A.account === B.account ||\n              !hasSufficientBalance)\n          }\n        >\n          {generateActionLabel(ADD_LIQUIDITY_LABEL, connected, env, A, B)}\n          {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n        </Button>\n      )}\n      {!pool && createPoolButton}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}