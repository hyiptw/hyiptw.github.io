{"ast":null,"code":"import _regeneratorRuntime from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,Spin}from\"antd\";import React,{useState}from\"react\";import{useConnection,useConnectionConfig,useSlippageConfig}from\"../../utils/connection\";import{useWallet}from\"../../utils/wallet\";import{CurrencyInput}from\"../currencyInput\";import{LoadingOutlined}from\"@ant-design/icons\";import{swap,usePoolForBasket}from\"../../utils/pools\";import{notify}from\"../../utils/notifications\";import{useCurrencyPairState}from\"../../utils/currencyPair\";import{generateActionLabel,POOL_NOT_AVAILABLE,SWAP_LABEL}from\"../labels\";import\"./trade.less\";import{getTokenName}from\"../../utils/utils\";var antIcon=/*#__PURE__*/React.createElement(LoadingOutlined,{style:{fontSize:24},spin:true});// TODO:\n// Compute price breakdown with/without fee\n// Show slippage\n// Show fee information\nexport var TradeEntry=function TradeEntry(){var _useWallet=useWallet(),wallet=_useWallet.wallet,connected=_useWallet.connected;var connection=useConnection();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),pendingTx=_useState2[0],setPendingTx=_useState2[1];var _useCurrencyPairState=useCurrencyPairState(),A=_useCurrencyPairState.A,B=_useCurrencyPairState.B,setLastTypedAccount=_useCurrencyPairState.setLastTypedAccount;var pool=usePoolForBasket([A===null||A===void 0?void 0:A.mintAddress,B===null||B===void 0?void 0:B.mintAddress]);var _useSlippageConfig=useSlippageConfig(),slippage=_useSlippageConfig.slippage;var _useConnectionConfig=useConnectionConfig(),env=_useConnectionConfig.env;var swapAccounts=function swapAccounts(){var tempMint=A.mintAddress;var tempAmount=A.amount;A.setMint(B.mintAddress);A.setAmount(B.amount);B.setMint(tempMint);B.setAmount(tempAmount);};var handleSwap=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var components;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(A.account&&B.mintAddress)){_context.next=14;break;}_context.prev=1;setPendingTx(true);components=[{account:A.account,mintAddress:A.mintAddress,amount:A.convertAmount()},{mintAddress:B.mintAddress,amount:B.convertAmount()}];_context.next=6;return swap(connection,wallet,components,slippage,pool);case 6:_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);notify({description:\"Please try again and approve transactions from your wallet\",message:\"Swap trade cancelled.\",type:\"error\"});case 11:_context.prev=11;setPendingTx(false);return _context.finish(11);case 14:case\"end\":return _context.stop();}}},_callee,null,[[1,8,11,14]]);}));return function handleSwap(){return _ref.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(CurrencyInput,{title:\"Input\",onInputChange:function onInputChange(val){if(A.amount!==val){setLastTypedAccount(A.mintAddress);}A.setAmount(val);},amount:A.amount,mint:A.mintAddress,onMintChange:function onMintChange(item){A.setMint(item);}}),/*#__PURE__*/React.createElement(Button,{type:\"primary\",className:\"swap-button\",onClick:swapAccounts},\"\\u21C5\"),/*#__PURE__*/React.createElement(CurrencyInput,{title:\"To (Estimate)\",onInputChange:function onInputChange(val){if(B.amount!==val){setLastTypedAccount(B.mintAddress);}B.setAmount(val);},amount:B.amount,mint:B.mintAddress,onMintChange:function onMintChange(item){B.setMint(item);}})),/*#__PURE__*/React.createElement(Button,{className:\"trade-button\",type:\"primary\",size:\"large\",onClick:connected?handleSwap:wallet.connect,style:{width:\"100%\"},disabled:connected&&(pendingTx||!A.account||!B.mintAddress||A.account===B.account||!A.sufficientBalance()||!pool)},generateActionLabel(!pool?POOL_NOT_AVAILABLE(getTokenName(env,A.mintAddress),getTokenName(env,B.mintAddress)):SWAP_LABEL,connected,env,A,B,true),pendingTx&&/*#__PURE__*/React.createElement(Spin,{indicator:antIcon,className:\"trade-spinner\"})));};","map":null,"metadata":{},"sourceType":"module"}