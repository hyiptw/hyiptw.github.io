{"ast":null,"code":"import _objectWithoutProperties from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _toConsumableArray from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createForOfIteratorHelper from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _objectSpread from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _createClass from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _wrapNativeSuper from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";import React,{useCallback,useContext,useEffect,useState}from\"react\";import{useConnection}from\"./connection\";import{useWallet}from\"./wallet\";import{PublicKey}from\"@solana/web3.js\";import{programIds,SWAP_HOST_FEE_ADDRESS,WRAPPED_SOL_MINT}from\"./ids\";import{AccountLayout,u64,MintLayout}from\"@solana/spl-token\";import{usePools}from\"./pools\";import{notify}from\"./notifications\";import{chunks}from\"./utils\";var AccountsContext=React.createContext(null);var AccountUpdateEvent=/*#__PURE__*/function(_Event){_inherits(AccountUpdateEvent,_Event);var _super=_createSuper(AccountUpdateEvent);function AccountUpdateEvent(id){var _this;_classCallCheck(this,AccountUpdateEvent);_this=_super.call(this,AccountUpdateEvent.type);_this.id=void 0;_this.id=id;return _this;}return AccountUpdateEvent;}(/*#__PURE__*/_wrapNativeSuper(Event));AccountUpdateEvent.type=\"AccountUpdate\";var EventEmitter=/*#__PURE__*/function(_EventTarget){_inherits(EventEmitter,_EventTarget);var _super2=_createSuper(EventEmitter);function EventEmitter(){_classCallCheck(this,EventEmitter);return _super2.apply(this,arguments);}_createClass(EventEmitter,[{key:\"raiseAccountUpdated\",value:function raiseAccountUpdated(id){this.dispatchEvent(new AccountUpdateEvent(id));}}]);return EventEmitter;}(/*#__PURE__*/_wrapNativeSuper(EventTarget));var accountEmitter=new EventEmitter();var pendingMintCalls=new Map();var mintCache=new Map();var pendingAccountCalls=new Map();var accountsCache=new Map();var pendingCalls=new Map();var genericCache=new Map();var getAccountInfo=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,pubKey){var info;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return connection.getAccountInfo(pubKey);case 2:info=_context.sent;if(!(info===null)){_context.next=5;break;}throw new Error(\"Failed to find mint account\");case 5:return _context.abrupt(\"return\",tokenAccountFactory(pubKey,info));case 6:case\"end\":return _context.stop();}}},_callee);}));return function getAccountInfo(_x,_x2){return _ref.apply(this,arguments);};}();var getMintInfo=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,pubKey){var info,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return connection.getAccountInfo(pubKey);case 2:info=_context2.sent;if(!(info===null)){_context2.next=5;break;}throw new Error(\"Failed to find mint account\");case 5:data=Buffer.from(info.data);return _context2.abrupt(\"return\",deserializeMint(data));case 7:case\"end\":return _context2.stop();}}},_callee2);}));return function getMintInfo(_x3,_x4){return _ref2.apply(this,arguments);};}();export var MintParser=function MintParser(pubKey,info){var buffer=Buffer.from(info.data);var data=deserializeMint(buffer);var details={pubkey:pubKey,account:_objectSpread({},info),info:data};return details;};export var TokenAccountParser=tokenAccountFactory;export var GenericAccountParser=function GenericAccountParser(pubKey,info){var buffer=Buffer.from(info.data);var details={pubkey:pubKey,account:_objectSpread({},info),info:buffer};return details;};export var keyToAccountParser=new Map();export var cache={query:function(){var _query=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection,pubKey,parser){var id,address,account,query;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(typeof pubKey===\"string\"){id=new PublicKey(pubKey);}else{id=pubKey;}address=id.toBase58();account=genericCache.get(address);if(!account){_context3.next=5;break;}return _context3.abrupt(\"return\",account);case 5:query=pendingCalls.get(address);if(!query){_context3.next=8;break;}return _context3.abrupt(\"return\",query);case 8:query=connection.getAccountInfo(id).then(function(data){if(!data){throw new Error(\"Account not found\");}return cache.add(id,data,parser);});pendingCalls.set(address,query);return _context3.abrupt(\"return\",query);case 11:case\"end\":return _context3.stop();}}},_callee3);}));function query(_x5,_x6,_x7){return _query.apply(this,arguments);}return query;}(),add:function add(id,obj,parser){var address=id.toBase58();var deserialize=parser?parser:keyToAccountParser.get(address);if(!deserialize){throw new Error(\"Deserializer needs to be registered or passed as a parameter\");}cache.registerParser(id,deserialize);pendingCalls.delete(address);var account=deserialize(id,obj);genericCache.set(address,account);return account;},get:function get(pubKey){var key;if(typeof pubKey!==\"string\"){key=pubKey.toBase58();}else{key=pubKey;}return genericCache.get(key);},registerParser:function registerParser(pubkey,parser){keyToAccountParser.set(pubkey.toBase58(),parser);},queryAccount:function(){var _queryAccount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection,pubKey){var id,address,account,query;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(typeof pubKey===\"string\"){id=new PublicKey(pubKey);}else{id=pubKey;}address=id.toBase58();account=accountsCache.get(address);if(!account){_context4.next=5;break;}return _context4.abrupt(\"return\",account);case 5:query=pendingAccountCalls.get(address);if(!query){_context4.next=8;break;}return _context4.abrupt(\"return\",query);case 8:query=getAccountInfo(connection,id).then(function(data){pendingAccountCalls.delete(address);accountsCache.set(address,data);return data;});pendingAccountCalls.set(address,query);return _context4.abrupt(\"return\",query);case 11:case\"end\":return _context4.stop();}}},_callee4);}));function queryAccount(_x8,_x9){return _queryAccount.apply(this,arguments);}return queryAccount;}(),addAccount:function addAccount(pubKey,obj){var account=tokenAccountFactory(pubKey,obj);accountsCache.set(account.pubkey.toBase58(),account);return account;},getAccount:function getAccount(pubKey){var key;if(typeof pubKey!==\"string\"){key=pubKey.toBase58();}else{key=pubKey;}return accountsCache.get(key);},queryMint:function(){var _queryMint=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection,pubKey){var id,address,mint,query;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(typeof pubKey===\"string\"){id=new PublicKey(pubKey);}else{id=pubKey;}address=id.toBase58();mint=mintCache.get(address);if(!mint){_context5.next=5;break;}return _context5.abrupt(\"return\",mint);case 5:query=pendingMintCalls.get(address);if(!query){_context5.next=8;break;}return _context5.abrupt(\"return\",query);case 8:query=getMintInfo(connection,id).then(function(data){pendingAccountCalls.delete(address);mintCache.set(address,data);return data;});pendingAccountCalls.set(address,query);return _context5.abrupt(\"return\",query);case 11:case\"end\":return _context5.stop();}}},_callee5);}));function queryMint(_x10,_x11){return _queryMint.apply(this,arguments);}return queryMint;}(),getMint:function getMint(pubKey){var key;if(typeof pubKey!==\"string\"){key=pubKey.toBase58();}else{key=pubKey;}return mintCache.get(key);},addMint:function addMint(pubKey,obj){var mint=deserializeMint(obj.data);mintCache.set(pubKey.toBase58(),mint);return mint;}};export var getCachedAccount=function getCachedAccount(predicate){var _iterator=_createForOfIteratorHelper(accountsCache.values()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _account=_step.value;if(predicate(_account)){return _account;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}};function tokenAccountFactory(pubKey,info){var buffer=Buffer.from(info.data);var data=deserializeAccount(buffer);var details={pubkey:pubKey,account:_objectSpread({},info),info:data};return details;}function wrapNativeAccount(pubkey,account){if(!account){return undefined;}return{pubkey:pubkey,account:account,info:{mint:WRAPPED_SOL_MINT,owner:pubkey,amount:new u64(account.lamports),delegate:null,delegatedAmount:new u64(0),isInitialized:true,isFrozen:false,isNative:true,rentExemptReserve:null,closeAuthority:null}};}var UseNativeAccount=function UseNativeAccount(){var connection=useConnection();var _useWallet=useWallet(),wallet=_useWallet.wallet;var _useState=useState(),_useState2=_slicedToArray(_useState,2),nativeAccount=_useState2[0],setNativeAccount=_useState2[1];useEffect(function(){if(!connection||!(wallet===null||wallet===void 0?void 0:wallet.publicKey)){return;}connection.getAccountInfo(wallet.publicKey).then(function(acc){if(acc){setNativeAccount(acc);}});connection.onAccountChange(wallet.publicKey,function(acc){if(acc){setNativeAccount(acc);}});},[setNativeAccount,wallet,wallet.publicKey,connection]);return{nativeAccount:nativeAccount};};var PRECACHED_OWNERS=new Set();var precacheUserTokenAccounts=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connection,owner){var accounts;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(owner){_context6.next=2;break;}return _context6.abrupt(\"return\");case 2:// used for filtering account updates over websocket\nPRECACHED_OWNERS.add(owner.toBase58());// user accounts are update via ws subscription\n_context6.next=5;return connection.getTokenAccountsByOwner(owner,{programId:programIds().token});case 5:accounts=_context6.sent;accounts.value.map(function(info){var data=deserializeAccount(info.account.data);// need to query for mint to get decimals\n// TODO: move to web3.js for decoding on the client side... maybe with callback\nvar details={pubkey:info.pubkey,account:_objectSpread({},info.account),info:data};return details;}).forEach(function(acc){accountsCache.set(acc.pubkey.toBase58(),acc);});case 7:case\"end\":return _context6.stop();}}},_callee6);}));return function precacheUserTokenAccounts(_x12,_x13){return _ref3.apply(this,arguments);};}();export function AccountsProvider(_ref4){var _ref4$children=_ref4.children,children=_ref4$children===void 0?null:_ref4$children;var connection=useConnection();var _useWallet2=useWallet(),wallet=_useWallet2.wallet,connected=_useWallet2.connected;var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),tokenAccounts=_useState4[0],setTokenAccounts=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),userAccounts=_useState6[0],setUserAccounts=_useState6[1];var _UseNativeAccount=UseNativeAccount(),nativeAccount=_UseNativeAccount.nativeAccount;var _usePools=usePools(),pools=_usePools.pools;var selectUserAccounts=useCallback(function(){return _toConsumableArray(accountsCache.values()).filter(function(a){return a.info.owner.toBase58()===wallet.publicKey.toBase58();});},[wallet]);useEffect(function(){setUserAccounts([wrapNativeAccount(wallet.publicKey,nativeAccount)].concat(_toConsumableArray(tokenAccounts)).filter(function(a){return a!==undefined;}));},[nativeAccount,wallet,tokenAccounts]);useEffect(function(){if(!connection||!wallet||!wallet.publicKey){setTokenAccounts([]);}else{// cache host accounts to avoid query during swap\nprecacheUserTokenAccounts(connection,SWAP_HOST_FEE_ADDRESS);precacheUserTokenAccounts(connection,wallet.publicKey).then(function(){setTokenAccounts(selectUserAccounts());});// This can return different types of accounts: token-account, mint, multisig\n// TODO: web3.js expose ability to filter. discuss filter syntax\nvar tokenSubID=connection.onProgramAccountChange(programIds().token,function(info){// TODO: fix type in web3.js\nvar id=info.accountId;// TODO: do we need a better way to identify layout (maybe a enum identifing type?)\nif(info.accountInfo.data.length===AccountLayout.span){var _data=deserializeAccount(info.accountInfo.data);// TODO: move to web3.js for decoding on the client side... maybe with callback\nvar details={pubkey:new PublicKey(info.accountId),account:_objectSpread({},info.accountInfo),info:_data};if(PRECACHED_OWNERS.has(details.info.owner.toBase58())||accountsCache.has(id)){accountsCache.set(id,details);setTokenAccounts(selectUserAccounts());accountEmitter.raiseAccountUpdated(id);}}else if(info.accountInfo.data.length===MintLayout.span){if(mintCache.has(id)){var _data2=Buffer.from(info.accountInfo.data);var mint=deserializeMint(_data2);mintCache.set(id,mint);accountEmitter.raiseAccountUpdated(id);}accountEmitter.raiseAccountUpdated(id);}if(genericCache.has(id)){cache.add(new PublicKey(id),info.accountInfo);}},\"singleGossip\");return function(){connection.removeProgramAccountChangeListener(tokenSubID);};}},[connection,connected,wallet===null||wallet===void 0?void 0:wallet.publicKey]);return/*#__PURE__*/React.createElement(AccountsContext.Provider,{value:{userAccounts:userAccounts,pools:pools,nativeAccount:nativeAccount}},children);}export function useNativeAccount(){var context=useContext(AccountsContext);return{account:context.nativeAccount};}export var getMultipleAccounts=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(connection,keys,commitment){var result,array;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return Promise.all(chunks(keys,99).map(function(chunk){return getMultipleAccountsCore(connection,chunk,commitment);}));case 2:result=_context7.sent;array=result.map(function(a){return a.array.map(function(acc){var data=acc.data,rest=_objectWithoutProperties(acc,[\"data\"]);var obj=_objectSpread(_objectSpread({},rest),{},{data:Buffer.from(data[0],\"base64\")});return obj;});}).flat();return _context7.abrupt(\"return\",{keys:keys,array:array});case 5:case\"end\":return _context7.stop();}}},_callee7);}));return function getMultipleAccounts(_x14,_x15,_x16){return _ref5.apply(this,arguments);};}();var getMultipleAccountsCore=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(connection,keys,commitment){var args,unsafeRes,array;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:args=connection._buildArgs([keys],commitment,\"base64\");_context8.next=3;return connection._rpcRequest(\"getMultipleAccounts\",args);case 3:unsafeRes=_context8.sent;if(!unsafeRes.error){_context8.next=6;break;}throw new Error(\"failed to get info about account \"+unsafeRes.error.message);case 6:if(!unsafeRes.result.value){_context8.next=9;break;}array=unsafeRes.result.value;return _context8.abrupt(\"return\",{keys:keys,array:array});case 9:throw new Error();case 10:case\"end\":return _context8.stop();}}},_callee8);}));return function getMultipleAccountsCore(_x17,_x18,_x19){return _ref6.apply(this,arguments);};}();export function useMint(id){var connection=useConnection();var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),mint=_useState8[0],setMint=_useState8[1];useEffect(function(){if(!id){return;}cache.queryMint(connection,id).then(setMint).catch(function(err){return notify({message:err.message,type:\"error\"});});var onAccountEvent=function onAccountEvent(e){var event=e;if(event.id===id){cache.queryMint(connection,id).then(setMint);}};accountEmitter.addEventListener(AccountUpdateEvent.type,onAccountEvent);return function(){accountEmitter.removeEventListener(AccountUpdateEvent.type,onAccountEvent);};},[connection,id]);return mint;}export function useUserAccounts(){var context=useContext(AccountsContext);return{userAccounts:context.userAccounts};}export function useAccount(pubKey){var connection=useConnection();var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),account=_useState10[0],setAccount=_useState10[1];var key=pubKey===null||pubKey===void 0?void 0:pubKey.toBase58();useEffect(function(){var query=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(){var acc;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.prev=0;if(key){_context9.next=3;break;}return _context9.abrupt(\"return\");case 3:_context9.next=5;return cache.queryAccount(connection,key).catch(function(err){return notify({message:err.message,type:\"error\"});});case 5:acc=_context9.sent;if(acc){setAccount(acc);}_context9.next=12;break;case 9:_context9.prev=9;_context9.t0=_context9[\"catch\"](0);console.error(_context9.t0);case 12:case\"end\":return _context9.stop();}}},_callee9,null,[[0,9]]);}));return function query(){return _ref7.apply(this,arguments);};}();query();var onAccountEvent=function onAccountEvent(e){var event=e;if(event.id===key){query();}};accountEmitter.addEventListener(AccountUpdateEvent.type,onAccountEvent);return function(){accountEmitter.removeEventListener(AccountUpdateEvent.type,onAccountEvent);};},[connection,key]);return account;}export function useCachedPool(){var context=useContext(AccountsContext);return{pools:context.pools};}export var useSelectedAccount=function useSelectedAccount(account){var _useUserAccounts=useUserAccounts(),userAccounts=_useUserAccounts.userAccounts;var index=userAccounts.findIndex(function(acc){return acc.pubkey.toBase58()===account;});if(index!==-1){return userAccounts[index];}return;};export var useAccountByMint=function useAccountByMint(mint){var _useUserAccounts2=useUserAccounts(),userAccounts=_useUserAccounts2.userAccounts;var index=userAccounts.findIndex(function(acc){return acc.info.mint.toBase58()===mint;});if(index!==-1){return userAccounts[index];}return;};// TODO: expose in spl package\nvar deserializeAccount=function deserializeAccount(data){var accountInfo=AccountLayout.decode(data);accountInfo.mint=new PublicKey(accountInfo.mint);accountInfo.owner=new PublicKey(accountInfo.owner);accountInfo.amount=u64.fromBuffer(accountInfo.amount);if(accountInfo.delegateOption===0){accountInfo.delegate=null;accountInfo.delegatedAmount=new u64(0);}else{accountInfo.delegate=new PublicKey(accountInfo.delegate);accountInfo.delegatedAmount=u64.fromBuffer(accountInfo.delegatedAmount);}accountInfo.isInitialized=accountInfo.state!==0;accountInfo.isFrozen=accountInfo.state===2;if(accountInfo.isNativeOption===1){accountInfo.rentExemptReserve=u64.fromBuffer(accountInfo.isNative);accountInfo.isNative=true;}else{accountInfo.rentExemptReserve=null;accountInfo.isNative=false;}if(accountInfo.closeAuthorityOption===0){accountInfo.closeAuthority=null;}else{accountInfo.closeAuthority=new PublicKey(accountInfo.closeAuthority);}return accountInfo;};// TODO: expose in spl package\nvar deserializeMint=function deserializeMint(data){if(data.length!==MintLayout.span){throw new Error(\"Not a valid Mint\");}var mintInfo=MintLayout.decode(data);if(mintInfo.mintAuthorityOption===0){mintInfo.mintAuthority=null;}else{mintInfo.mintAuthority=new PublicKey(mintInfo.mintAuthority);}mintInfo.supply=u64.fromBuffer(mintInfo.supply);mintInfo.isInitialized=mintInfo.isInitialized!==0;if(mintInfo.freezeAuthorityOption===0){mintInfo.freezeAuthority=null;}else{mintInfo.freezeAuthority=new PublicKey(mintInfo.freezeAuthority);}return mintInfo;};","map":null,"metadata":{},"sourceType":"module"}