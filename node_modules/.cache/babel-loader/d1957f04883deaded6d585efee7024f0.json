{"ast":null,"code":"import _toConsumableArray from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/fs/srmswap/oyster-swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Account,PublicKey,SystemProgram}from\"@solana/web3.js\";import{sendTransaction,useConnection}from\"./connection\";import{useEffect,useState}from\"react\";import{Token,MintLayout,AccountLayout}from\"@solana/spl-token\";import{notify}from\"./notifications\";import{cache,getCachedAccount,useUserAccounts,useCachedPool,getMultipleAccounts}from\"./accounts\";import{programIds,SWAP_HOST_FEE_ADDRESS,SWAP_PROGRAM_OWNER_FEE_ADDRESS,WRAPPED_SOL_MINT}from\"./ids\";import{createInitSwapInstruction,TokenSwapLayout,depositInstruction,withdrawInstruction,TokenSwapLayoutLegacyV0,swapInstruction}from\"./../models\";var LIQUIDITY_TOKEN_PRECISION=8;export var removeLiquidity=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,wallet,liquidityAmount,account,pool){var minAmount0,minAmount1,poolMint,accountA,accountB,authority,signers,instructions,cleanupInstructions,accountRentExempt,toAccounts,tx;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(pool){_context.next=2;break;}return _context.abrupt(\"return\");case 2:notify({message:\"Removing Liquidity...\",description:\"Please review transactions to approve.\",type:\"warn\"});// TODO get min amounts based on total supply and liquidity\nminAmount0=0;minAmount1=0;_context.next=7;return cache.queryMint(connection,pool.pubkeys.mint);case 7:poolMint=_context.sent;_context.next=10;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[0]);case 10:accountA=_context.sent;_context.next=13;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[1]);case 13:accountB=_context.sent;if(poolMint.mintAuthority){_context.next=16;break;}throw new Error(\"Mint doesnt have authority\");case 16:authority=poolMint.mintAuthority;signers=[];instructions=[];cleanupInstructions=[];_context.next=22;return connection.getMinimumBalanceForRentExemption(AccountLayout.span);case 22:accountRentExempt=_context.sent;_context.next=25;return findOrCreateAccountByMint(wallet.publicKey,wallet.publicKey,instructions,cleanupInstructions,accountRentExempt,accountA.info.mint,signers);case 25:_context.t0=_context.sent;_context.next=28;return findOrCreateAccountByMint(wallet.publicKey,wallet.publicKey,instructions,cleanupInstructions,accountRentExempt,accountB.info.mint,signers);case 28:_context.t1=_context.sent;toAccounts=[_context.t0,_context.t1];instructions.push(Token.createApproveInstruction(programIds().token,account.pubkey,authority,wallet.publicKey,[],liquidityAmount));// withdraw\ninstructions.push(withdrawInstruction(pool.pubkeys.account,authority,pool.pubkeys.mint,pool.pubkeys.feeAccount,account.pubkey,pool.pubkeys.holdingAccounts[0],pool.pubkeys.holdingAccounts[1],toAccounts[0],toAccounts[1],pool.pubkeys.program,programIds().token,liquidityAmount,minAmount0,minAmount1));_context.next=34;return sendTransaction(connection,wallet,instructions.concat(cleanupInstructions),signers);case 34:tx=_context.sent;notify({message:\"Liquidity Returned. Thank you for your support.\",type:\"success\",description:\"Transaction - \".concat(tx)});case 36:case\"end\":return _context.stop();}}},_callee);}));return function removeLiquidity(_x,_x2,_x3,_x4,_x5){return _ref.apply(this,arguments);};}();export var swap=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,wallet,components,SLIPPAGE,pool){var amountIn,minAmountOut,holdingA,holdingB,poolMint,authority,instructions,cleanupInstructions,signers,accountRentExempt,fromAccount,toAccount,hostFeeAccount,tx;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(!pool||!components[0].account)){_context2.next=3;break;}notify({type:\"error\",message:\"Pool doesn't exsist.\",description:\"Swap trade cancelled\"});return _context2.abrupt(\"return\");case 3:// Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n// see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n// as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\namountIn=components[0].amount;// these two should include slippage\nminAmountOut=components[1].amount*(1-SLIPPAGE);holdingA=pool.pubkeys.holdingMints[0].toBase58()===components[0].account.info.mint.toBase58()?pool.pubkeys.holdingAccounts[0]:pool.pubkeys.holdingAccounts[1];holdingB=holdingA===pool.pubkeys.holdingAccounts[0]?pool.pubkeys.holdingAccounts[1]:pool.pubkeys.holdingAccounts[0];_context2.next=9;return cache.queryMint(connection,pool.pubkeys.mint);case 9:poolMint=_context2.sent;if(!(!poolMint.mintAuthority||!pool.pubkeys.feeAccount)){_context2.next=12;break;}throw new Error(\"Mint doesnt have authority\");case 12:authority=poolMint.mintAuthority;instructions=[];cleanupInstructions=[];signers=[];_context2.next=18;return connection.getMinimumBalanceForRentExemption(AccountLayout.span);case 18:accountRentExempt=_context2.sent;fromAccount=getWrappedAccount(instructions,cleanupInstructions,components[0].account,wallet.publicKey,amountIn+accountRentExempt,signers);toAccount=findOrCreateAccountByMint(wallet.publicKey,wallet.publicKey,instructions,cleanupInstructions,accountRentExempt,new PublicKey(components[1].mintAddress),signers);// create approval for transfer transactions\ninstructions.push(Token.createApproveInstruction(programIds().token,fromAccount,authority,wallet.publicKey,[],amountIn));hostFeeAccount=SWAP_HOST_FEE_ADDRESS?findOrCreateAccountByMint(wallet.publicKey,SWAP_HOST_FEE_ADDRESS,instructions,cleanupInstructions,accountRentExempt,pool.pubkeys.mint,signers):undefined;// swap\ninstructions.push(swapInstruction(pool.pubkeys.account,authority,fromAccount,holdingA,holdingB,toAccount,pool.pubkeys.mint,pool.pubkeys.feeAccount,pool.pubkeys.program,programIds().token,amountIn,minAmountOut,hostFeeAccount));_context2.next=26;return sendTransaction(connection,wallet,instructions.concat(cleanupInstructions),signers);case 26:tx=_context2.sent;notify({message:\"Trade executed.\",type:\"success\",description:\"Transaction - \".concat(tx)});case 28:case\"end\":return _context2.stop();}}},_callee2);}));return function swap(_x6,_x7,_x8,_x9,_x10){return _ref2.apply(this,arguments);};}();export var addLiquidity=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection,wallet,components,slippage,pool,options){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(pool){_context3.next=7;break;}if(options){_context3.next=3;break;}throw new Error(\"Options are required to create new pool.\");case 3:_context3.next=5;return _addLiquidityNewPool(wallet,connection,components,options);case 5:_context3.next=9;break;case 7:_context3.next=9;return _addLiquidityExistingPool(pool,components,connection,wallet);case 9:case\"end\":return _context3.stop();}}},_callee3);}));return function addLiquidity(_x11,_x12,_x13,_x14,_x15,_x16){return _ref3.apply(this,arguments);};}();var getHoldings=function getHoldings(connection,accounts){return accounts.map(function(acc){return cache.queryAccount(connection,new PublicKey(acc));});};var toPoolInfo=function toPoolInfo(item,program,toMerge){var mint=new PublicKey(item.data.tokenPool);return{pubkeys:{account:item.pubkey,program:program,mint:mint,holdingMints:[],holdingAccounts:[item.data.tokenAccountA,item.data.tokenAccountB].map(function(a){return new PublicKey(a);})},legacy:false,raw:item};};export var usePools=function usePools(){var connection=useConnection();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),pools=_useState2[0],setPools=_useState2[1];// initial query\nuseEffect(function(){setPools([]);var queryPools=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(swapId){var isLegacy,poolsArray,toQuery,_args6=arguments;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:isLegacy=_args6.length>1&&_args6[1]!==undefined?_args6[1]:false;poolsArray=[];_context6.next=4;return connection.getProgramAccounts(swapId);case 4:_context6.sent.filter(function(item){return item.account.data.length===TokenSwapLayout.span||item.account.data.length===TokenSwapLayoutLegacyV0.span;}).map(function(item){var result={data:undefined,account:item.account,pubkey:item.pubkey,init:function(){var _init=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:case\"end\":return _context4.stop();}}},_callee4);}));function init(){return _init.apply(this,arguments);}return init;}()};// handling of legacy layout can be removed soon...\nif(item.account.data.length===TokenSwapLayoutLegacyV0.span){result.data=TokenSwapLayoutLegacyV0.decode(item.account.data);var pool=toPoolInfo(result,swapId);pool.legacy=isLegacy;poolsArray.push(pool);result.init=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var holdings;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return Promise.all(getHoldings(connection,[result.data.tokenAccountA,result.data.tokenAccountB]));case 3:holdings=_context5.sent;pool.pubkeys.holdingMints=[holdings[0].info.mint,holdings[1].info.mint];_context5.next=10;break;case 7:_context5.prev=7;_context5.t0=_context5[\"catch\"](0);console.log(_context5.t0);case 10:case\"end\":return _context5.stop();}}},_callee5,null,[[0,7]]);}));}else{result.data=TokenSwapLayout.decode(item.account.data);var _pool=toPoolInfo(result,swapId);_pool.legacy=isLegacy;_pool.pubkeys.feeAccount=new PublicKey(result.data.feeAccount);_pool.pubkeys.holdingMints=[new PublicKey(result.data.mintA),new PublicKey(result.data.mintB)];poolsArray.push(_pool);}return result;});toQuery=poolsArray.map(function(p){var _p$pubkeys$feeAccount;return[].concat(_toConsumableArray(p.pubkeys.holdingAccounts.map(function(h){return h.toBase58();})),_toConsumableArray(p.pubkeys.holdingMints.map(function(h){return h.toBase58();})),[(_p$pubkeys$feeAccount=p.pubkeys.feeAccount)===null||_p$pubkeys$feeAccount===void 0?void 0:_p$pubkeys$feeAccount.toBase58(),// used to calculate volume aproximation\np.pubkeys.mint.toBase58()]).filter(function(p){return p;});}).flat();// This will pre-cache all accounts used by pools\n// All those accounts are updated whenever there is a change\n_context6.next=8;return getMultipleAccounts(connection,toQuery,\"single\").then(function(_ref6){var keys=_ref6.keys,array=_ref6.array;return array.map(function(obj,index){var pubKey=new PublicKey(keys[index]);if(obj.data.length===AccountLayout.span){return cache.addAccount(pubKey,obj);}else if(obj.data.length===MintLayout.span){return cache.addMint(pubKey,obj);}return obj;});});case 8:return _context6.abrupt(\"return\",poolsArray);case 9:case\"end\":return _context6.stop();}}},_callee6);}));return function queryPools(_x17){return _ref4.apply(this,arguments);};}();Promise.all([queryPools(programIds().swap)].concat(_toConsumableArray(programIds().swap_legacy.map(function(leg){return queryPools(leg,true);})))).then(function(all){setPools(all.flat());});},[connection]);useEffect(function(){var subID=connection.onProgramAccountChange(programIds().swap,/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(info){var id,account,updated,index,filtered,pool;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:id=info.accountId;if(info.accountInfo.data.length===TokenSwapLayout.span){account=info.accountInfo;updated={data:TokenSwapLayout.decode(account.data),account:account,pubkey:new PublicKey(id)};index=pools&&pools.findIndex(function(p){return p.pubkeys.account.toBase58()===id;});if(index&&index>=0&&pools){// TODO: check if account is empty?\nfiltered=pools.filter(function(p,i){return i!==index;});setPools([].concat(_toConsumableArray(filtered),[toPoolInfo(updated,programIds().swap)]));}else{pool=toPoolInfo(updated,programIds().swap);pool.pubkeys.feeAccount=new PublicKey(updated.data.feeAccount);pool.pubkeys.holdingMints=[new PublicKey(updated.data.mintA),new PublicKey(updated.data.mintB)];setPools([].concat(_toConsumableArray(pools),[pool]));}}case 2:case\"end\":return _context7.stop();}}},_callee7);}));return function(_x18){return _ref7.apply(this,arguments);};}(),\"singleGossip\");return function(){connection.removeProgramAccountChangeListener(subID);};},[connection,pools]);return{pools:pools};};export var usePoolForBasket=function usePoolForBasket(mints){var connection=useConnection();var _useCachedPool=useCachedPool(),pools=_useCachedPool.pools;var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),pool=_useState4[0],setPool=_useState4[1];var sortedMints=_toConsumableArray(mints).sort();useEffect(function(){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(){var matchingPool,i,p,account;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:// reset pool during query\nsetPool(undefined);matchingPool=pools.filter(function(p){return!p.legacy;}).filter(function(p){return p.pubkeys.holdingMints.map(function(a){return a.toBase58();}).sort().every(function(address,i){return address===sortedMints[i];});});i=0;case 3:if(!(i<matchingPool.length)){_context8.next=14;break;}p=matchingPool[i];_context8.next=7;return cache.queryAccount(connection,p.pubkeys.holdingAccounts[0]);case 7:account=_context8.sent;if(account.info.amount.eqn(0)){_context8.next=11;break;}setPool(p);return _context8.abrupt(\"return\");case 11:i++;_context8.next=3;break;case 14:case\"end\":return _context8.stop();}}},_callee8);}))();},[connection].concat(_toConsumableArray(sortedMints),[pools]));return pool;};export var useOwnedPools=function useOwnedPools(){var _useCachedPool2=useCachedPool(),pools=_useCachedPool2.pools;var _useUserAccounts=useUserAccounts(),userAccounts=_useUserAccounts.userAccounts;var map=userAccounts.reduce(function(acc,item){var key=item.info.mint.toBase58();acc.set(key,[].concat(_toConsumableArray(acc.get(key)||[]),[item]));return acc;},new Map());return pools.filter(function(p){return map.has(p.pubkeys.mint.toBase58());}).map(function(item){var _item$pubkeys$feeAcco,_map$get;var feeAccount=(_item$pubkeys$feeAcco=item.pubkeys.feeAccount)===null||_item$pubkeys$feeAcco===void 0?void 0:_item$pubkeys$feeAcco.toBase58();return(_map$get=map.get(item.pubkeys.mint.toBase58()))===null||_map$get===void 0?void 0:_map$get.map(function(a){return{account:a,isFeeAccount:feeAccount===a.pubkey.toBase58(),pool:item};});}).flat();};// Allow for this much price movement in the pool before adding liquidity to the pool aborts\nvar SLIPPAGE=0.005;function _addLiquidityExistingPool(_x19,_x20,_x21,_x22){return _addLiquidityExistingPool2.apply(this,arguments);}function _addLiquidityExistingPool2(){_addLiquidityExistingPool2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(pool,components,connection,wallet){var poolMint,accountA,accountB,reserve0,reserve1,fromA,fromB,supply,authority,amount0,amount1,liquidity,instructions,cleanupInstructions,signers,accountRentExempt,fromKeyA,fromKeyB,toAccount,tx;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:notify({message:\"Adding Liquidity...\",description:\"Please review transactions to approve.\",type:\"warn\"});_context9.next=3;return cache.queryMint(connection,pool.pubkeys.mint);case 3:poolMint=_context9.sent;if(poolMint.mintAuthority){_context9.next=6;break;}throw new Error(\"Mint doesnt have authority\");case 6:if(pool.pubkeys.feeAccount){_context9.next=8;break;}throw new Error(\"Invald fee account\");case 8:_context9.next=10;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[0]);case 10:accountA=_context9.sent;_context9.next=13;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[1]);case 13:accountB=_context9.sent;reserve0=accountA.info.amount.toNumber();reserve1=accountB.info.amount.toNumber();fromA=accountA.info.mint.toBase58()===components[0].mintAddress?components[0]:components[1];fromB=fromA===components[0]?components[1]:components[0];if(!(!fromA.account||!fromB.account)){_context9.next=20;break;}throw new Error(\"Missing account info.\");case 20:supply=poolMint.supply.toNumber();authority=poolMint.mintAuthority;// Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n// see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n// as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\namount0=fromA.amount;amount1=fromB.amount;liquidity=Math.min(amount0*(1-SLIPPAGE)*supply/reserve0,amount1*(1-SLIPPAGE)*supply/reserve1);instructions=[];cleanupInstructions=[];signers=[];_context9.next=30;return connection.getMinimumBalanceForRentExemption(AccountLayout.span);case 30:accountRentExempt=_context9.sent;fromKeyA=getWrappedAccount(instructions,cleanupInstructions,fromA.account,wallet.publicKey,amount0+accountRentExempt,signers);fromKeyB=getWrappedAccount(instructions,cleanupInstructions,fromB.account,wallet.publicKey,amount1+accountRentExempt,signers);toAccount=findOrCreateAccountByMint(wallet.publicKey,wallet.publicKey,instructions,[],accountRentExempt,pool.pubkeys.mint,signers,new Set([pool.pubkeys.feeAccount.toBase58()]));// create approval for transfer transactions\ninstructions.push(Token.createApproveInstruction(programIds().token,fromKeyA,authority,wallet.publicKey,[],amount0));instructions.push(Token.createApproveInstruction(programIds().token,fromKeyB,authority,wallet.publicKey,[],amount1));// depoist\ninstructions.push(depositInstruction(pool.pubkeys.account,authority,fromKeyA,fromKeyB,pool.pubkeys.holdingAccounts[0],pool.pubkeys.holdingAccounts[1],pool.pubkeys.mint,toAccount,pool.pubkeys.program,programIds().token,liquidity,amount0,amount1));_context9.next=39;return sendTransaction(connection,wallet,instructions.concat(cleanupInstructions),signers);case 39:tx=_context9.sent;notify({message:\"Pool Funded. Happy trading.\",type:\"success\",description:\"Transaction - \".concat(tx)});case 41:case\"end\":return _context9.stop();}}},_callee9);}));return _addLiquidityExistingPool2.apply(this,arguments);}function findOrCreateAccountByMint(payer,owner,instructions,cleanupInstructions,accountRentExempt,mint,// use to identify same type\nsigners,excluded){var accountToFind=mint.toBase58();var account=getCachedAccount(function(acc){return acc.info.mint.toBase58()===accountToFind&&acc.info.owner.toBase58()===owner.toBase58()&&(excluded===undefined||!excluded.has(acc.pubkey.toBase58()));});var isWrappedSol=accountToFind===WRAPPED_SOL_MINT.toBase58();var toAccount;if(account&&!isWrappedSol){toAccount=account.pubkey;}else{// creating depositor pool account\nvar newToAccount=createSplAccount(instructions,payer,accountRentExempt,mint,owner,AccountLayout.span);toAccount=newToAccount.publicKey;signers.push(newToAccount);if(isWrappedSol){cleanupInstructions.push(Token.createCloseAccountInstruction(programIds().token,toAccount,payer,payer,[]));}}return toAccount;}export function calculateDependentAmount(_x23,_x24,_x25,_x26){return _calculateDependentAmount.apply(this,arguments);}// TODO: add ui to customize curve type\nfunction _calculateDependentAmount(){_calculateDependentAmount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(connection,independent,amount,pool){var poolMint,accountA,accountB,mintA,mintB,isFirstIndependent,depPrecision,indPrecision,adjAmount,dependentTokenAmount;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:_context10.next=2;return cache.queryMint(connection,pool.pubkeys.mint);case 2:poolMint=_context10.sent;_context10.next=5;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[0]);case 5:accountA=_context10.sent;_context10.next=8;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[1]);case 8:accountB=_context10.sent;if(poolMint.mintAuthority){_context10.next=11;break;}throw new Error(\"Mint doesnt have authority\");case 11:if(!poolMint.supply.eqn(0)){_context10.next=13;break;}return _context10.abrupt(\"return\");case 13:_context10.next=15;return cache.queryMint(connection,accountA.info.mint);case 15:mintA=_context10.sent;_context10.next=18;return cache.queryMint(connection,accountB.info.mint);case 18:mintB=_context10.sent;if(!(!mintA||!mintB)){_context10.next=21;break;}return _context10.abrupt(\"return\");case 21:isFirstIndependent=accountA.info.mint.toBase58()===independent;depPrecision=Math.pow(10,isFirstIndependent?mintB.decimals:mintA.decimals);indPrecision=Math.pow(10,isFirstIndependent?mintA.decimals:mintB.decimals);adjAmount=amount*indPrecision;dependentTokenAmount=isFirstIndependent?accountB.info.amount.toNumber()/accountA.info.amount.toNumber()*adjAmount:accountA.info.amount.toNumber()/accountB.info.amount.toNumber()*adjAmount;return _context10.abrupt(\"return\",dependentTokenAmount/depPrecision);case 27:case\"end\":return _context10.stop();}}},_callee10);}));return _calculateDependentAmount.apply(this,arguments);}function _addLiquidityNewPool(_x27,_x28,_x29,_x30){return _addLiquidityNewPool2.apply(this,arguments);}function _addLiquidityNewPool2(){_addLiquidityNewPool2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(wallet,connection,components,options){var instructions,cleanupInstructions,liquidityTokenAccount,tokenSwapAccount,_yield$PublicKey$find,_yield$PublicKey$find2,authority,nonce,accountRentExempt,holdingAccounts,signers,depositorAccount,feeAccount,tx;return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:notify({message:\"Creating new pool...\",description:\"Please review transactions to approve.\",type:\"warn\"});if(!components.some(function(c){return!c.account;})){_context11.next=4;break;}notify({message:\"You need to have balance for all legs in the basket...\",description:\"Please review inputs.\",type:\"error\"});return _context11.abrupt(\"return\");case 4:instructions=[];cleanupInstructions=[];liquidityTokenAccount=new Account();// Create account for pool liquidity token\n_context11.t0=instructions;_context11.t1=SystemProgram;_context11.t2=wallet.publicKey;_context11.t3=liquidityTokenAccount.publicKey;_context11.next=13;return connection.getMinimumBalanceForRentExemption(MintLayout.span);case 13:_context11.t4=_context11.sent;_context11.t5=MintLayout.span;_context11.t6=programIds().token;_context11.t7={fromPubkey:_context11.t2,newAccountPubkey:_context11.t3,lamports:_context11.t4,space:_context11.t5,programId:_context11.t6};_context11.t8=_context11.t1.createAccount.call(_context11.t1,_context11.t7);_context11.t0.push.call(_context11.t0,_context11.t8);tokenSwapAccount=new Account();_context11.next=22;return PublicKey.findProgramAddress([tokenSwapAccount.publicKey.toBuffer()],programIds().swap);case 22:_yield$PublicKey$find=_context11.sent;_yield$PublicKey$find2=_slicedToArray(_yield$PublicKey$find,2);authority=_yield$PublicKey$find2[0];nonce=_yield$PublicKey$find2[1];// create mint for pool liquidity token\ninstructions.push(Token.createInitMintInstruction(programIds().token,liquidityTokenAccount.publicKey,LIQUIDITY_TOKEN_PRECISION,// pass control of liquidity mint to swap program\nauthority,// swap program can freeze liquidity token mint\nnull));// Create holding accounts for\n_context11.next=29;return connection.getMinimumBalanceForRentExemption(AccountLayout.span);case 29:accountRentExempt=_context11.sent;holdingAccounts=[];signers=[];components.forEach(function(leg){if(!leg.account){return;}var mintPublicKey=leg.account.info.mint;// component account to store tokens I of N in liquidity poll\nholdingAccounts.push(createSplAccount(instructions,wallet.publicKey,accountRentExempt,mintPublicKey,authority,AccountLayout.span));});// creating depositor pool account\ndepositorAccount=createSplAccount(instructions,wallet.publicKey,accountRentExempt,liquidityTokenAccount.publicKey,wallet.publicKey,AccountLayout.span);// creating fee pool account its set from env variable or to creater of the pool\n// creater of the pool is not allowed in some versions of token-swap program\nfeeAccount=createSplAccount(instructions,wallet.publicKey,accountRentExempt,liquidityTokenAccount.publicKey,SWAP_PROGRAM_OWNER_FEE_ADDRESS||wallet.publicKey,AccountLayout.span);// create all accounts in one transaction\n_context11.next=37;return sendTransaction(connection,wallet,instructions,[liquidityTokenAccount,depositorAccount,feeAccount].concat(holdingAccounts,_toConsumableArray(signers)));case 37:tx=_context11.sent;notify({message:\"Accounts created\",description:\"Transaction \".concat(tx),type:\"success\"});notify({message:\"Adding Liquidity...\",description:\"Please review transactions to approve.\",type:\"warn\"});signers=[];instructions=[];cleanupInstructions=[];_context11.t9=instructions;_context11.t10=SystemProgram;_context11.t11=wallet.publicKey;_context11.t12=tokenSwapAccount.publicKey;_context11.next=49;return connection.getMinimumBalanceForRentExemption(TokenSwapLayout.span);case 49:_context11.t13=_context11.sent;_context11.t14=TokenSwapLayout.span;_context11.t15=programIds().swap;_context11.t16={fromPubkey:_context11.t11,newAccountPubkey:_context11.t12,lamports:_context11.t13,space:_context11.t14,programId:_context11.t15};_context11.t17=_context11.t10.createAccount.call(_context11.t10,_context11.t16);_context11.t9.push.call(_context11.t9,_context11.t17);components.forEach(function(leg,i){if(!leg.account){return;}// create temporary account for wrapped sol to perform transfer\nvar from=getWrappedAccount(instructions,cleanupInstructions,leg.account,wallet.publicKey,leg.amount+accountRentExempt,signers);instructions.push(Token.createTransferInstruction(programIds().token,from,holdingAccounts[i].publicKey,wallet.publicKey,[],leg.amount));});instructions.push(createInitSwapInstruction(tokenSwapAccount,authority,holdingAccounts[0].publicKey,holdingAccounts[1].publicKey,liquidityTokenAccount.publicKey,feeAccount.publicKey,depositorAccount.publicKey,programIds().token,programIds().swap,nonce,options.curveType,options.tradeFeeNumerator,options.tradeFeeDenominator,options.ownerTradeFeeNumerator,options.ownerTradeFeeDenominator,options.ownerWithdrawFeeNumerator,options.ownerWithdrawFeeDenominator));// All instructions didn't fit in single transaction\n// initialize and provide inital liquidity to swap in 2nd (this prevents loss of funds)\n_context11.next=59;return sendTransaction(connection,wallet,instructions.concat(cleanupInstructions),[tokenSwapAccount].concat(_toConsumableArray(signers)));case 59:tx=_context11.sent;notify({message:\"Pool Funded. Happy trading.\",type:\"success\",description:\"Transaction - \".concat(tx)});case 61:case\"end\":return _context11.stop();}}},_callee11);}));return _addLiquidityNewPool2.apply(this,arguments);}function getWrappedAccount(instructions,cleanupInstructions,toCheck,payer,amount,signers){if(!toCheck.info.isNative){return toCheck.pubkey;}var account=new Account();instructions.push(SystemProgram.createAccount({fromPubkey:payer,newAccountPubkey:account.publicKey,lamports:amount,space:AccountLayout.span,programId:programIds().token}));instructions.push(Token.createInitAccountInstruction(programIds().token,WRAPPED_SOL_MINT,account.publicKey,payer));cleanupInstructions.push(Token.createCloseAccountInstruction(programIds().token,account.publicKey,payer,payer,[]));signers.push(account);return account.publicKey;}function createSplAccount(instructions,payer,accountRentExempt,mint,owner,space){var account=new Account();instructions.push(SystemProgram.createAccount({fromPubkey:payer,newAccountPubkey:account.publicKey,lamports:accountRentExempt,space:space,programId:programIds().token}));instructions.push(Token.createInitAccountInstruction(programIds().token,mint,account.publicKey,owner));return account;}","map":null,"metadata":{},"sourceType":"module"}